<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WizardWrx.ASCIIInfo</name>
    </assembly>
    <members>
        <member name="T:WizardWrx.ASCIICharacterDisplayInfo">
            <summary>
            Instances of this class represent individual ASCII characters. Since the
            NUL character is defined, and occupies the first element, the numeric 
            code that corresponds to a character maps directly to the corresponding
            element in this array.
            </summary>
            <example>
            The ASCII code for a space is 32. ASCIICharacterDisplayInfo[32], for C#,
            or ASCIICharacterDisplayInfo(32), for Visual Basic, returns the item for
            the space character.
            
            Likewise, the ASCII code for a horizontal TAB character is 9. Hence, the
            C# expression ASCIICharacterDisplayInfo[9] evaluates to the information
            about the TAB character. Likewise, ASCIICharacterDisplayInfo(9) does the
            same thing in Visual Basic.
            
            The following example comes from production code in the class library
            that motivated me to create this library.
            
                ASCIICharacterDisplayInfo [ ] asciiCharTbl = ASCII_Character_Display_Table.GetTheSingleInstance ( ).AllASCIICharacters;
                StringBuilder sbTheBadChar = new StringBuilder ( );
                sbTheBadChar.Append ( asciiCharTbl [ ( uint ) _chrBad ].DisplayText );
            
            Obviously, more things go into the message before it is returned to the
            calling routine.
            </example>
            <see cref="T:WizardWrx.ASCII_Character_Display_Table"/>
        </member>
        <member name="M:WizardWrx.ASCIICharacterDisplayInfo.#ctor">
            <summary>
            This constructor satisifes interfaces that require a default
            constructor. It is marked private because the assembly that owns all
            instances of this class uses one of the other two constructors.
            </summary>
        </member>
        <member name="M:WizardWrx.ASCIICharacterDisplayInfo.#ctor(System.UInt32)">
            <summary>
            Create an instance for a character for which the alternate display
            is undefined because it is either unnecessary or impractical.
            </summary>
            <param name="puintCode">
            The The code is an unsigned integer between zero and 255.
            </param>
        </member>
        <member name="M:WizardWrx.ASCIICharacterDisplayInfo.#ctor(System.UInt32,System.String)">
            <summary>
            Create an instance for a character that has alternate display text.
            </summary>
            <param name="puintCode">
            The The code is an unsigned integer between zero and 255.
            </param>
            <param name="pstrAlternateText">
            Specify alternate text to display in place of the actual character.
            </param>
        </member>
        <member name="M:WizardWrx.ASCIICharacterDisplayInfo.Initialise(System.UInt32,System.String)">
            <summary>
            Both public constructors use this routine to initialize everything.
            </summary>
            <param name="puintCode">
            The The code is an unsigned integer between zero and 255.
            </param>
            <param name="pstrAlternateText">
            Specify alternate text to display in place of the actual character.
            </param>
        </member>
        <member name="P:WizardWrx.ASCIICharacterDisplayInfo.ASCIICharacter">
            <summary>
            Gets the Unicode character represented by the code.
            </summary>
        </member>
        <member name="P:WizardWrx.ASCIICharacterDisplayInfo.AlternateText">
            <summary>
            Gets the alternate text, if one exists, or returns the empty string.
            </summary>
        </member>
        <member name="P:WizardWrx.ASCIICharacterDisplayInfo.Code">
            <summary>
            Gets the raw ASCII code, as an unsigned integer.
            </summary>
        </member>
        <member name="P:WizardWrx.ASCIICharacterDisplayInfo.CodeAsDecimal">
            <summary>
            Gets a string representation of the raw ASCII code, as a decimal
            number.
            </summary>
        </member>
        <member name="P:WizardWrx.ASCIICharacterDisplayInfo.CodeAsHexadecimal">
            <summary>
            Gets a string representation of the raw ASCII code, as a hexadecimal
            number.
            </summary>
        </member>
        <member name="P:WizardWrx.ASCIICharacterDisplayInfo.DisplayText">
            <summary>
            Gets the display text, regardless of source, from one place.
            </summary>
        </member>
        <member name="T:WizardWrx.ASCII_Character_Display_Table">
            <summary>
            Provide read only access to a table of ASCII characters and text to
            display for selected special characters.
            </summary>
            <example>
            The ASCII code for a space is 32. ASCIICharacterDisplayInfo[32], for C#,
            or ASCIICharacterDisplayInfo(32), for Visual Basic, returns the item for
            the space character.
            
            Likewise, the ASCII code for a horizontal TAB character is 9. Hence, the
            C# expression ASCIICharacterDisplayInfo[9] evaluates to the information
            about the TAB character. Likewise, ASCIICharacterDisplayInfo(9) does the
            same thing in Visual Basic.
            
            The following example comes from production code in the class library
            that motivated me to create this library.
            
                ASCIICharacterDisplayInfo [ ] asciiCharTbl = ASCII_Character_Display_Table.GetTheSingleInstance ( ).AllASCIICharacters;
                StringBuilder sbTheBadChar = new StringBuilder ( );
                sbTheBadChar.Append ( asciiCharTbl [ ( uint ) _chrBad ].DisplayText );
            
            Obviously, more things go into the message before it is returned to the
            calling routine.
            </example>
            <seealso cref="T:WizardWrx.ASCIICharacterDisplayInfo"/>
        </member>
        <member name="M:WizardWrx.ASCII_Character_Display_Table.GetTheSingleInstance">
            <summary>
            Gets a reference to the single ASCII_Character_Display_Table
            instance.
            </summary>
            <returns>
            The return value is a reference to the single instance of this class
            that is created in response to the first call to this method. Please
            see the remarks.
            </returns>
            <remarks>
            The example given under the help topic for this class shows you that
            you need not actually allocate storage for the instance, since what
            you really need is a copy of the ASCIICharacterDisplayInfo table,
            available through the read only AllASCIICharacters property, which
            can be assigned directly to an AllASCIICharacters array.
            </remarks>
        </member>
        <member name="M:WizardWrx.ASCII_Character_Display_Table.Initialise">
            <summary>
            Since the class is a singleton, I separated the initializer from the
            constructor, as has been my custom.
            </summary>
        </member>
        <member name="F:WizardWrx.ASCII_Character_Display_Table._asciiTable">
            <summary>
            It all comes down to this little array.
            </summary>
        </member>
        <member name="P:WizardWrx.ASCII_Character_Display_Table.AllASCIICharacters">
            <summary>
            Gets the populated ASCIICharacterDisplayInfo array that is the
            raison d'etre of this class.
            </summary>
        </member>
        <member name="T:WizardWrx.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:WizardWrx.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:WizardWrx.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:WizardWrx.Properties.Resources.ERRMSG_INVALID_NODE_IN_ASCII_TABLE">
            <summary>
              Looks up a localized string similar to The following XML node is invalid: .
            </summary>
        </member>
    </members>
</doc>
