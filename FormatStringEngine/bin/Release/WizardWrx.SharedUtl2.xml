<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WizardWrx.SharedUtl2</name>
    </assembly>
    <members>
        <member name="T:WizardWrx.StandardConstants">
            <summary>
            This class consists entirely of commonly used constants.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.FILE_COPY_OVERWRITE_FORBIDDEN">
            <summary>
            Use with the third argument of the static Copy method of the File 
            class to explicitly forbid file overwriting. See Remarks.
            </summary>
            <remarks>
            If you NEVER want overwriting, use the default (two-argument)
            form of the Copy method.
            </remarks>
        </member>
        <member name="F:WizardWrx.StandardConstants.FILE_COPY_OVERWRITE_PERMITTED">
            <summary>
            Use with the third argument of the static Copy method of the File 
            class to enable file overwriting, which is forbidden by default.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.FILE_OUT_APPEND">
            <summary>
            Use this symbolic constant to set the append argument to an
            overloaded StreamWriter constructor, to cause it to append to a file
            if one exists.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.FILE_OUT_CREATE">
            <summary>
            Use this symbolic constant to set the append argument to an
            overloaded StreamWriter constructor, to cause it to overwrite a file
            if one exists.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.MAKE_STREAM_IO_ASYNCHRONOUS">
            <summary>
            Use this symbolic constant to set the useAsync argument to a
            FileStream constructor to TRUE, allowing I/O to be asynchronous.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.MAKE_STREAM_IO_SYNCHRONOUS">
            <summary>
            Use this symbolic constant to set the useAsync argument to a
            FileStream constructor to FALSE, allowing I/O to be synchronous,
            which is the default.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.ARRAY_FIRST_ELEMENT">
            <summary>
            All CLR arrays are zero based. Therefore, the index of the first
            element is always zero.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.ARRAY_INVALID_INDEX">
            <summary>
            All CLR arrays are zero based. Therefore, the index of the first
            element is always zero, and a number less than zero is always an
            invalid index value.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.ARRAY_LIST_ORDINAL_TO_SUBSCRIPT">
            <summary>
            Subtract this value from a human readable list number (1 based) to
            derive an equivalent array index, or add it to an array subscript to
            derive an equivalent human readable list number.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.EMPTY_STRING_LENGTH">
            <summary>
            Use this constant to document when zero stands for the length of an
            empty string, or is the lower limit of a string length argument.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.ERROR_SUCCESS">
            <summary>
            Use this with environment.exit() and other situations when you want
            to report the default "success" exit code of zero.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.FILE_BUFSIZE_STANDARD_01KB">
            <summary>
            This is the smallest buffer that I can imagine allocating for
            sequential file I/O. If I need to allocate a smaller buffer, I'll
            use a locally defined constant.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.FILE_BUFSIZE_STANDARD_02KB">
            <summary>
            For reading a typical configuration file, 2KB should be more than
            adequate, so why waste memory on a bigger buffer.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.FILE_BUFSIZE_STANDARD_04KB">
            <summary>
            Something that tends to come in chunks the size of a logical memory
            page justify only
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.FILE_BUFSIZE_STANDARD_08KB">
            <summary>
            For most applications, I use a buffer size of 8KB for sequential
            file I/O.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.FILE_BUFSIZE_STANDARD_16KB">
            <summary>
            A few circumstances may warrant a slightly bigger buffer, especially
            if it means that there is a good chance that a file completely fits
            in one buffer.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.FILE_BUFSIZE_STANDARD_32KB">
            <summary>
            A VERY few circumstances may warrant a slightly bigger buffer,
            if it means that there is a good chance that a file completely fits
            in one buffer.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.FILE_BUFSIZE_STANDARD_64KB">
            <summary>
            Finally, for those rare cases in which we want to read chunks the
            size of an 8086 memory segment, I define a truly huge buffer.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.FQFN_PREFIX_START_POS">
            <summary>
            A fully qualified file name that starts with a drive letter starts
            here.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.FQFN_PREFIX_START_LEN">
            <summary>
            A fully qualified file name that starts with a drive letter is this
            long.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.HIGHEST_7_BIT_ASCII">
            <summary>
            The highest value that is a legal 7 bit ASCII code.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.MAX_PATH">
            <summary>
            Constant equivalent to the longest path that can be passed to a
            regular (ANSI) Win32 file I/O function.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.MINUS_ONE">
            <summary>
            Constant equivalent to integer value of -1, to disambiguate literal
            values in code, and to clarify that the adjacent minus sign is part
            of the value.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.PLUS_ONE">
            <summary>
            Constant equivalent to integer value of +1, to disambiguate literal
            values in code, and to clarify that the adjacent plus sign is part
            of the value.
            
            Compare to character constants CHAR_LC_I, CHAR_UC_I, CHAR_LC_L, and
            CHAR_UC_L, all of which can look similar in code, especially if the
            plus sign is omitted, as is often the case.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.SB_CAPACITY_01KB">
            <summary>
            Constant for constructing a 1KB StringBuilder object.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.SB_CAPACITY_08KB">
            <summary>
            Constant for constructing a 8KB StringBuilder object.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.STRING_INDEXOF_NOT_FOUND">
            <summary>
            Value returned by the IndexOf methods, e. g., of the String class,
            if the object sought is not found.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.STRING_SUBSTR_BEGINNING">
            <summary>
            Use with the Substring method of the String class to denote the
            first character in a string.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.UNC_PREFIX_START_POS">
            <summary>
            A UNC prefix starts here.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.UNC_PREFIX_START_LEN">
            <summary>
            A UNC prefix is this long.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.PLUS_TWO">
            <summary>
            Number 2, to clearly distinguish it from a letter Z, which can look
            a lot like it.
            
            Compare to character constants CHAR_LC_Z and CHAR_UC_Z.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.ZERO">
            <summary>
            Constant equivalent to integer value of zero, to disambiguate zero
            literal values in code.
            
            Compare to character constants CHAR_LC_O and CHAR_UC_O.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.NULL_CHAR">
            <summary>
            From time to time, it is handy to be able to simply and clearly show
            a NULL character.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.CHAR_LC_I">
            <summary>
            Lower case I, for use in code, where it might be easily mistaken for
            a number 1 or a letter L.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.CHAR_UC_I">
            <summary>
            Upper case I, for use in code, where it might be easily mistaken for
            a number 1 or a letter L.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.CHAR_LC_L">
            <summary>
            Lower case L, for use in code, where it might be easily mistaken for
            a number 1 or a letter I.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.CHAR_UC_L">
            <summary>
            Upper case L, for use in code, where it might be easily mistaken for
            a number 1 or a letter I.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.CHAR_LC_O">
            <summary>
            Lower case O, for use in code, where it might be easily mistaken for
            a number zero.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.CHAR_UC_O">
            <summary>
            Upper case O, for use in code, where it might be easily mistaken for
            a number zero.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.CHAR_LC_Z">
            <summary>
            Lower case Z, for use in code, where it might be easily mistaken for
            a number two.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.CHAR_UC_Z">
            <summary>
            Upper case Z, for use in code, where it might be easily mistaken for
            a number two.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.DLM_COMMA">
            <summary>
            Comma, used mostly as a list delimiter.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.DLM_PIPE">
            <summary>
            How have I got on this long witout my faithful field separator?
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.DLM_EMAIL_ADDRESS">
            <summary>
            At sign, used as delimiter in email addresses.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.DLM_SEMICOLON">
            <summary>
            Semicolon, used mostly as a list delimiter.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.EQUALS_SIGN">
            <summary>
            Equal sign, used as delimiter in private profile key-value pairs.ww
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.HYPHEN">
            <summary>
            Literal hyphens are also easly confused in code, especially with
            minus signs.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.OS_EXTENSION_DELIM">
            <summary>
            Operating system extension delimiter.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.OS_PATH_DELIM">
            <summary>
            (Deprecated) Operating system path delimiter.
            Use System.IO.Path.DirectorySeparatorChar.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.QUOTE_CHAR">
            <summary>
            We are always needing to embed a quote character in a string.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.SINGLE_QUOTE">
            <summary>
            From time to time, a string must be enclosed in single quotes, for
            example, when building a SQL string.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.SINGLE_SPACE">
            <summary>
            It is often important to know that the character is a particlular
            position in a string is, indeed, a space, rather than a non-printing
            character that the printer or video rendering engine mapped to one.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.TAB_CHAR">
            <summary>
            Tab charecters are in constant use, as delimiters, and for white
            space.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.UNDERSCORE">
            <summary>
            Underscores can be really hard to see in code, both on paper and
            on screen.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.URI_PATH_DELIM">
            <summary>
            (Deprecated) The URI path delimiter is a forward slash, and we use
            lots of them to parse URI strings in ways that are beyond the
            capabilities of the built-in URI parsing classes.
            
            Use System.IO.Path.AltDirectorySeparatorChar;
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.ADDRESS_SPACER">
            <summary>
            Space, middle dot, and space, for use as a sort of horizontal bullet.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.APP_DIR_START_PAGE">
            <summary>
            A URI that ends with a forward slash calls forth this specially
            named page.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.APP_START_PAGE_KEY">
            <summary>
            Key, in web.config, that contains the name of the application's
            start (home) page.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.ASP_RELATIVE_PATH_BEGIN">
            <summary>
            Relative path strings returned by the Request object begin with one
            of these.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.ASP_NET_REL_EXEC_PATH_PREFIX">
            <summary>
            Relative path strings returned by the Request object begin with one
            of thest.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.CITY_STATE_SPACER">
            <summary>
            Comma, then space, for use as a separator between a city and state.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.CONSOLE_APP_BOJ">
            <summary>
            Format string, for use with the static string.format method, to
            generate a formatted BOJ message for a console application.
            </summary>
            <remarks>
            The substitution tokens are intended to be replaced as follows.
            
            1) Program name, such as MyProgram. Forego the .exe bit.
            
            2) Program version string.
            
            3) Environment.Newline.
            
            4) Startup time, me.StartupTime.ToString.
            
            5) Startup time, UTC, me.StartupTime.ToUniversalTime().ToString ().
            </remarks>
        </member>
        <member name="F:WizardWrx.StandardConstants.CONSOLE_APP_EOJ">
            <summary>
            Format string, for use with the static string.format method, to
            generate a formatted BOJ message for a console application.
            </summary>
            <remarks>
            The substitution tokens are intended to be replaced as follows.
            
            1) Environment.Newline.
            
            2) Program name, such as MyProgram. Forego the .exe bit.
            
            3) Finish time, usually dtmFinish.ToString().
            
            4)  Finish time, usually dtmFinish.ToUniversalTime().ToString().
            
            5) Program elapsed time, usually me.UpTimeDispHms.
            </remarks>
        </member>
        <member name="F:WizardWrx.StandardConstants.EMPTY_STRING">
            <summary>
            I like having a way to initialize a string to an emptry string.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.ERRMSG_ARG_IS_EMPTY_STRING">
            <summary>
            Error message to return when an unexpected empty string is passed
            into a function.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.ERRMSG_ARG_IS_NULL">
            <summary>
            Error message to return when an unexpected NULL reference is passed
            into a function.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.ERRMSG_ARG_IS_NULL_OR_EMPTY">
            <summary>
            Error message to return when an unexpected NULL or empty string is
            passed into a function.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.ERRMSG_ARG_ENUM_VALUE_IS_INVALID">
            <summary>
            Error message to return when an enumerator is set to an undefined
            value.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.ERRMSG_ARG_FILE_NOT_FOUND">
            <summary>
            Error message to return when a file is not found.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.FQFN_WIN_TPL_WITH_BACKSLASH">
            <summary>
            Use this template with string.Format to construct a fully qualified
            Windows file name from a directory name and a file name when the
            directory name comes without a termial path delimiter.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.FQFN_WIN_TPL_WITHOUT_BACKSLASH">
            <summary>
            Use this template with string.Format to construct a fully qualified
            Windows file name from a directory name and a file name when the
            directory name comes terminated with a path delimiter.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.FQFN_WEB_TPL_WITH_FWDSLASH">
            <summary>
            Use this template with string.Format to construct a fully qualified
            Web or Unix file name from a directory name and a file name when the
            directory name comes without a termial path delimiter.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.FQFN_WEB_TPL_WITHOUT_FWDSLASH">
            <summary>
            Use this template with string.Format to construct a fully qualified
            Web or Unix file name from a directory name and a file name when the
            directory name comes terminated with a path delimiter.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.UQFN_TPL_WITH_EXT_DLM">
            <summary>
            Use this template with string.Format to construct an unqualified
            file name from two strings containing a valid base name and a
            valid extension, when the base name string is unterminated.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.UQFN_TPL_WITHOUT_EXT_DLM">
            <summary>
            Use this template with string.Format to construct an unqualified
            file name from two strings containing a valid base name and a
            valid extension, when the base name string is terminated with an
            extension delimiter (.) character.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.HTML_COMMENT_PREFIX">
            <summary>
            Minimal HTML (and XML) comment prefix string.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.HTML_COMMENT_PREFIX_SP">
            <summary>
            HTML (and XML) comment prefix string, followed by a single space.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.HTML_COMMENT_SUFFIX">
            <summary>
            Minimal HTML (and XML) comment suffix string.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.HTML_COMMENT_SUFFIX_SP">
            <summary>
            HTML (and XML) comment suffix string, preceded by a single space.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.HTML_NONBREAKING_SPACE">
            <summary>
            Web Developers are always needing a non-breaking space, for use as
            filler, especially in dynamically generated tables.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.LOCALHOST">
            <summary>
            The DNS name of the local loopback is always "localhost".
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.LOCALHOST_IP_ADDR">
            <summary>
            The local loopback has the reserved IP address of 127.0.0.1.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.STRING_SPLIT_CARRIAGE_RETURN">
            <summary>
            Use this string as the solitary element of an array of strings to
            split a string that contains text from a file of lines delimited by
            carriage returns only.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.STRING_SPLIT_LINEFEED">
            <summary>
            Use this string as the solitary element of an array of strings to
            split a string that contains text from a file of lines delimited by
            line feeds only.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.STRING_SPLIT_NEWLINE">
            <summary>
            Use this string as the solitary element of an array of strings to
            split a string that contains text from a file into an array of
            strings, each element of which is a line of text, stripped of its
            line ending, if any.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.OS_DRIVE_PATH_DELIMITER">
            <summary>
            Operating system drive path delimiter, for old style windows drive
            specifications.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.RELATIVE_URI_DFLT_DOC_CURR_DIR">
            <summary>
            This is the string that the MakeRelativeUri function returns,given a
            URI to the default document for a directory and the root of the Web
            application.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.STATE_ZIP_SPACER">
            <summary>
            Two nonbreaking spaces, for use between a state and Zip code.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.UNC_SERVER_DELIM">
            <summary>
            The server delimiter string.
            </summary>
        </member>
        <member name="F:WizardWrx.StandardConstants.URI_PROTOCOL_DELIM">
            <summary>
            The URI protocol delimiter is a colon, follwed by two forward
            slashes, and we use lots of them to parse URI strings in ways
            that are beyond the capabilities of the built-in URI parsing
            classes.
            </summary>
        </member>
        <member name="T:WizardWrx.WholeFileIO">
            <summary>
            Static methods for performing bulk file I/O operations, such as reading
            and writing whole files in one pass.
            </summary>
        </member>
        <member name="M:WizardWrx.WholeFileIO.#ctor">
            <summary>
            The sole constructor takes no arguments, and is marked private, so
            that callers cannot create an instance of this class.
            </summary>
        </member>
        <member name="M:WizardWrx.WholeFileIO.FileToArray(System.String)">
            <summary>
            Read a whole file into an array.
            </summary>
            <param name="pstrRelativeAppFileName">
            String containing the relative path of file to read.
            A null or empty string causes the method to throw an exception.
            </param>
            <returns>
            String containing the contents of the specified file, if it exists.
            If the file is not found, an empty string is returned.
            </returns>
            This method calls companion method FileToString, to read the file
            into a string, followed by StringOfLinesToArray, from companion
            class, TextBlocks, to split the string into an array.
            
            Since there are two versions each of methods FileToString and
            StringOfLinesToArray, there are four versions of this method.
            <remarks>
            </remarks>
        </member>
        <member name="M:WizardWrx.WholeFileIO.FileToArray(System.String,System.String)">
            <summary>
            Read a whole file into an array.
            </summary>
            <param name="pstrRelativeAppFileName">
            String containing the relative path of file to read.
            A null or empty string causes the method to throw an exception.
            </param>
            <param name="pstrDfltDirName">
            String containing the name of the path to prefix to the string in
            pstrRelativeAppFileName to construct a fully qualified file name.
            </param>
            <returns>
            String containing the contents of the specified file, if it exists.
            If the file is not found, an empty string is returned.
            </returns>
        </member>
        <member name="M:WizardWrx.WholeFileIO.FileToArray(System.String,System.StringSplitOptions)">
            <summary>
            Read a whole file into an array.
            </summary>
            <param name="pstrRelativeAppFileName">
            String containing the relative path of file to read.
            A null or empty string causes the method to throw an exception.
            </param>
            <param name="penmStringSplitOptions">
            A member of the StringSplitOptions enumeration, presumably other
            than StringSplitOptions.None, which is assumed by the first
            overload. The only option supported by version 2 of the Microsoft
            .NET CLR is RemoveEmptyEntries.
            </param>
            <returns>
            String containing the contents of the specified file, if it exists.
            If the file is not found, an empty string is returned.
            </returns>
        </member>
        <member name="M:WizardWrx.WholeFileIO.FileToArray(System.String,System.String,System.StringSplitOptions)">
            <summary>
            Read a whole file into an array.
            </summary>
            <param name="pstrRelativeAppFileName">
            String containing the relative path of file to read.
            A null or empty string causes the method to throw an exception.
            </param>
            <param name="pstrDfltDirName">
            String containing the name of the path to prefix to the string in
            pstrRelativeAppFileName to construct a fully qualified file name.
            </param>
            <param name="penmStringSplitOptions">
            A member of the StringSplitOptions enumeration, presumably other
            than StringSplitOptions.None, which is assumed by the first
            overload. The only option supported by version 2 of the Microsoft
            .NET CLR is RemoveEmptyEntries.
            </param>
            <returns>
            String containing the contents of the specified file, if it exists.
            If the file is not found, an empty string is returned.
            </returns>
        </member>
        <member name="M:WizardWrx.WholeFileIO.FileToString(System.String)">
            <summary>
            Read a whole file into a string.
            </summary>
            <param name="pstrRelativeAppFileName">
            String containing the relative path of file to read.
            A null or empty string causes the method to throw an exception.
            </param>
            <returns>
            String containing the contents of the specified file, if it exists.
            If the file is not found, an empty string is returned.
            </returns>
        </member>
        <member name="M:WizardWrx.WholeFileIO.FileToString(System.String,System.String)">
            <summary>
            Read a whole file into a string.
            </summary>
            <param name="pstrRelativeAppFileName">
            String containing the relative path of file to read.
            A null or empty string causes the method to throw an exception.
            </param>
            <param name="pstrDfltDirName">
            String containing the name of the path to prefix to the string in
            pstrRelativeAppFileName to construct a fully qualified file name.
            </param>
            <returns>
            String containing the contents of the specified file, if it exists.
            If the file is not found, an empty string is returned.
            </returns>
        </member>
        <member name="T:WizardWrx.FileNameTricks">
            <summary>
            This class exposes numerous static methods for manipulating file names.
            Unlike the objects in the System.File namespace, thes objects don't need
            a real file object. All work on strings that represent file names.
            </summary>
        </member>
        <member name="M:WizardWrx.FileNameTricks.EnsureHasTerminalBackslash(System.String)">
            <summary>
            Ensure that a path string has NO terminal backslahs.
            </summary>
            <param name="pstrInputPath">
            String to evaluate and change if needed.
            </param>
            <returns>
            Path string that is guaranteed to HAVE a terminal backslash.
            </returns>
            <remarks>
            This method is deprecated. Use PathAddBackslash.
            </remarks>
        </member>
        <member name="M:WizardWrx.FileNameTricks.EnsureNoTerminalBackslash(System.String)">
            <summary>
            Ensure that a path string has a terminal backslahs.
            </summary>
            <param name="pstrInputPath">
            String to evaluate and change if needed.
            </param>
            <returns>
            Path string that is guaranteed NOT to have a terminal backslash.
            </returns>
            <remarks>
            This method is deprecated. Use PathRemoveBackslash.
            </remarks>
        </member>
        <member name="M:WizardWrx.FileNameTricks.PathAddBackslash(System.String)">
            <summary>
            Ensure that a path string has NO terminal backslahs.
            </summary>
            <param name="pstrInputPath">
            String to evaluate and change if needed.
            </param>
            <returns>
            Path string that is guaranteed to HAVE a terminal backslash.
            </returns>
        </member>
        <member name="M:WizardWrx.FileNameTricks.PathMakeRelative(System.String,System.String)">
            <summary>
            Given a path, such as the fully qualfied name of a resource DLL, and
            a second fully qualified name, such as that of the program directory
            or current working directory, compute a relative path to the first
            named path.
            </summary>
            <param name="pstrFQPath">
            This string is the fully qualified path for which a relative path is
            required. This string may be the name of a file or a directory, but
            it must exist in the file system.
            </param>
            <param name="pstrDirectoryRelativeTo">
            This string is the fully qualified path relative to which a path to
            pstrFQPath is required. This string may be the name of a file or a
            directory, but it must exist in the file system. Whether you supply
            a file name or that of its directory, the outcome is the same, since
            this has no effect on the relative path to pstrFQPath.
            </param>
            <returns>
            The returned string is a relative path string, ready for use.
            </returns>
            <remarks>
            This method uses methods of the System.Uri class to perform its path
            math, taking advantage of the fact that a path in the file system is
            a valid URI.
            </remarks>
        </member>
        <member name="M:WizardWrx.FileNameTricks.PathRemoveBackslash(System.String)">
            <summary>
            Ensure that a path string has a terminal backslahs.
            </summary>
            <param name="pstrInputPath">
            String to evaluate and change if needed.
            </param>
            <returns>
            Path string that is guaranteed NOT to have a terminal backslash.
            </returns>
        </member>
        <member name="M:WizardWrx.FileNameTricks.FileDirName(System.String,WizardWrx.FileNameTricks.enmTerminaBackslash)">
            <summary>
            Extract the directory name from a fully qualified file name.
            </summary>
            <param name="pstrFQFN">
            String containing file name to evaluate.
            </param>
            <param name="penmTerminaBackslash">
            A member of the enmTerminaBackslash, which specifies whether the
            returned string should have a terminal backslash.
            </param>
            <returns></returns>
        </member>
        <member name="M:WizardWrx.FileNameTricks.FileExtn(System.String)">
            <summary>
            Given a string that contains a partially or fully qualified file
            name, return the extension, without the delimiting dot.
            </summary>
            <param name="pstrFQFN">
            File name string to evaluate.
            </param>
            <returns>
            Extension, less the delimiting dot.
            </returns>
        </member>
        <member name="M:WizardWrx.FileNameTricks.FQFBasename(System.String)">
            <summary>
            Extract the fully qualified base name, that is, all but the
            extension, from a partially or fully qualified file name.
            </summary>
            <param name="pstrFQFN">
            Fully or partially qualified file name to evaluate.
            </param>
            <returns>
            All of pstrFQFN except its extension and extension delimiter.
            </returns>
        </member>
        <member name="M:WizardWrx.FileNameTricks.MakeFQFN(System.String,System.String)">
            <summary>
            Given a file name and a default directory, which may be a null
            reference or an empty string, return a file name that is guaranteed
            to be fully qualified.
            </summary>
            <param name="pstrUQFN">
            String which is assumed to be a relative file name.
            </param>
            <param name="pstrDefaultDir">
            String to use as a default path, unless argument pstrUQFN is a fully
            qualified file name.
            
            If this value is null, or an empty string, the current working
            directory is used.
            </param>
            <returns>
            String that contains a string that is guaranteed to represent a
            fully qualified file name.
            </returns>
        </member>
        <member name="M:WizardWrx.FileNameTricks.PathFixup(System.String,WizardWrx.FileNameTricks.enmTerminaBackslash)">
            <summary>
            Originally a private method, this method returns a path (directory)
            name string that is guaranteed to meet the specified requirement,
            with respect to presence or absence of a terminal backslash.
            </summary>
            <param name="pstrInputPath">
            String containing path (directory) name to evaluate.
            </param>
            <param name="penmBackslash">
            A member of the enmTerminaBackslash, which specifies whether the
            returned string should have a terminal backslash.
            </param>
            <returns>
            Path (directory) name string that is guaranteed to either have, or omit, a terminal backslash, as specified.
            </returns>
        </member>
        <member name="M:WizardWrx.FileNameTricks.UQFBasename(System.String)">
            <summary>
            Given a string that represents the name of a file, extract only the
            base name (EXCLUDING the extension).
            </summary>
            <param name="pstrFQFN">
            String to evaluate.
            </param>
            <returns>
            Base name extracted from string. This means the unqualified file
            name, less its directory and its extension.
            </returns>
        </member>
        <member name="T:WizardWrx.FileNameTricks.enmTerminaBackslash">
            <summary>
            Enumeration for specifying whether you want a path string with or
            without a trailing backslahs.
            </summary>
        </member>
        <member name="F:WizardWrx.FileNameTricks.enmTerminaBackslash.Include">
            <summary>
            Include the traling backslahs, for example, if you intend to
            append another string containing a relative path name or an
            unqualified file name.
            </summary>
        </member>
        <member name="F:WizardWrx.FileNameTricks.enmTerminaBackslash.Omit">
            <summary>
            Exclude the trailing backslahs, for example, if you intend to
            display the name in an unambiguous context.
            </summary>
        </member>
        <member name="T:WizardWrx.Logging.WinEventLogging">
            <summary>
            The methods of this static class hide most of the details of writing
            plain text messages in the Windows system event logs.
            </summary>
        </member>
        <member name="F:WizardWrx.Logging.WinEventLogging.APPLICATION_LOG_NAME">
            <summary>
            This string equates to the standard Application Event Log.
            </summary>
        </member>
        <member name="F:WizardWrx.Logging.WinEventLogging.SECURITY_LOG_NAME">
            <summary>
            This string equates to the standard Security Event Log, which is
            inaccessible to the methods of this class.
            </summary>
        </member>
        <member name="F:WizardWrx.Logging.WinEventLogging.SYSTEM_LOG_NAME">
            <summary>
            This string equates to the standard System Event Log. While this log
            is officially accessible to this class, Microsoft says that it is
            intended for use by device drivers.
            </summary>
        </member>
        <member name="F:WizardWrx.Logging.WinEventLogging.TEMPLATE_FOR_MESSAGE">
            <summary>
            When LogEvent argument pfHideCallerName is SHOW_CALLER_NAME, the
            message is constructed from this template. See Remarks.
            </summary>
            <remarks>
            Prior to version 2.60, argument pstrCallerName was discarded
            silently. Hence, this format is never seen in code developed against
            older versions of this library. Since LogEvent is a private method,
            the only way to elicit this behavior is through a new public method.
            
            Rather than do so, I am more inclined to add an overload of LogEvent
            that omits pstrCallerName, in favor of a new EventLogEntryType
            argument, for setting the icon displayed in the event viewer.
            
            Nevertheless, for the present, I'll keep the existing method and its
            callers.
            </remarks>
        </member>
        <member name="F:WizardWrx.Logging.WinEventLogging.TEMPLATE_INVALID_EVENT_SOURCE_ID">
            <summary>
            All overloads of LogAppEvent now trap for an unregistered event
            source id, using this template.
            </summary>
        </member>
        <member name="F:WizardWrx.Logging.WinEventLogging.TEMPLATE_INVALID_EVENTSOURCEID">
            <summary>
            All overloads of LogAppEvent that take an event source ID use this
            message, in conjunction with TEMPLATE_INVALID_EVENT_SOURCE_ID, to
            fail gracefully, while reporting the coding error.
            </summary>
        </member>
        <member name="F:WizardWrx.Logging.WinEventLogging.TEMPLATE_INVALID_EVENT_ENTRY_TYPE">
            <summary>
            The newer overloads of LogAppEvent, beginning with its third and
            fourth overloads, accepts a member of the EventLogEntryType
            enumeration. To ensure that messages are written even if its value
            is invalid, these methods catch the InvalidEnumArgumentException
            exception that occurs when this happens, and report the exception
            with an Information icon, followed by a stop error message with the
            invalid value, the original message text, and a stack trace.
            </summary>
        </member>
        <member name="F:WizardWrx.Logging.WinEventLogging.TEMPLATE_INVALID_EVENTENTRYTYPE_MSG">
            <summary>
            This string is the pattern from which the error message details
            discussed in the documentation of TEMPLATE_INVALID_EVENT_ENTRY_TYPE
            is created.
            </summary>
        </member>
        <member name="F:WizardWrx.Logging.WinEventLogging.TEXT_FOR_EMPTY_MESSAGE">
            <summary>
            This string is substituted if a caller presents a method with a
            blank message.
            </summary>
        </member>
        <member name="F:WizardWrx.Logging.WinEventLogging.WIZARDWRX_EVENT_SOURCE_ID">
            <summary>
            This string defines a default event source ID, WizardWrx, which I
            register on behalf of my own applications.
            </summary>
        </member>
        <member name="M:WizardWrx.Logging.WinEventLogging.LogAppEvent(System.String,System.String)">
            <summary>
            Record an Information type message in the event log to which event
            source "WizardWrx" is registered.
            </summary>
            <param name="pstrCallerName">
            Name of calling routine, to show in message.
            </param>
            <param name="pstrMessage">
            Text of message to record on behalf of the routine named in argument
            pstrCallerName.
            </param>
            <remarks>
            The message is tagged with event source ID "WizardWrx," which is
            defined as public constant WIZARDWRX_EVENT_SOURCE_ID.
            
            In our installations, WizardWrx is registered with the Application
            Event Log.
            </remarks>
        </member>
        <member name="M:WizardWrx.Logging.WinEventLogging.LogAppEvent(System.String,System.String,System.String)">
            <summary>
            Record an Information type message in the Application Event Log.
            </summary>
            <param name="pstrCallerName">
            Name of calling routine, to show in message.
            </param>
            <param name="pstrMessage">
            Text of message to record on behalf of the routine named in argument
            pstrCallerName.
            </param>
            <param name="pstrEventSourceID">
            The event source ID to use in the message. This ID may be anything,
            but it must be registered in advance by a user who has Administrator
            credentials on the local machine.
            
            Since each event source is linked to an event log by the operating
            system, the event log to which the message is written is implied.
            </param>
        </member>
        <member name="M:WizardWrx.Logging.WinEventLogging.LogAppEvent(System.Diagnostics.EventLogEntryType,System.String)">
            <summary>
            Write a message in the event log to which event source "WizardWrx"
            is registered.
            </summary>
            <param name="penmEventLogEntryType">
            Specify a member of the System.Diagnostics. EventLogEntryType
            enumeration to indicate which icon the event viewer should display
            with the message.
            
            This property may also be used to filter messages, using such tools
            as the Microsoft LogParser.
            </param>
            <param name="pstrMessage">
            Text of message to record. The text is recorded exactly as is.
            </param>
            <remarks>
            The message is tagged with event source ID "WizardWrx," which is
            defined as public constant WIZARDWRX_EVENT_SOURCE_ID.
            
            In our installations, WizardWrx is registered with the Application
            Event Log.
            </remarks>
        </member>
        <member name="M:WizardWrx.Logging.WinEventLogging.LogAppEvent(System.Diagnostics.EventLogEntryType,System.String,System.String)">
            <summary>
            Write a message in the event log to which the event source Id given
            in argument pstrEventSourceID is registered.
            </summary>
            <param name="penmEventLogEntryType">
            Specify a member of the System.Diagnostics. EventLogEntryType
            enumeration to indicate which icon the event viewer should display
            with the message.
            
            This property may also be used to filter messages, using such tools
            as the Microsoft LogParser.
            </param>
            <param name="pstrMessage">
            Text of message to record. The text is recorded exactly as is.
            </param>
            <param name="pstrEventSourceID">
            The event source ID to use in the message. This ID may be anything,
            but it must be registered in advance by a user who has Administrator
            credentials on the local machine.
            
            Since each event source is linked to an event log by the operating
            system, the event log to which the message is written is implied.
            </param>
        </member>
        <member name="M:WizardWrx.Logging.WinEventLogging.LogEvent(System.String,System.String,System.String,System.Boolean)">
            <summary>
            This private method does the real work of this class, on behalf of
            the public methods described and defined above.
            </summary>
            <param name="pstrCallerName">
            Name of calling routine, to show in message.
            
            Assembly.GetCallingAssembly().GetName().Name is substituted if this
            argument is null or empty.
            </param>
            <param name="pstrMessage">
            Text of message to record on behalf of the routine named in argument
            pstrCallerName.
            
            The text "No additional information from Caller" is substituted if
            this string is null or empty. This string is stored in a private
            string constant, TEXT_FOR_EMPTY_MESSAGE.
            </param>
            <param name="pstrEventSourceID">
            The event source ID to use in the message. This ID may be anything,
            but it must be registered in advance by a user who has Administrator
            credentials on the local machine.
            
            The text "WizardWrx" is substituted if the string is null or empty.
            This string is stored in a public string constant,
            WIZARDWRX_EVENT_SOURCE_ID.
            </param>
            <param name="pfHideCallerName">
            Set this Boolean to true, HIDE_CALLER_NAME, to cause the method to
            exhibit its historical behavior. Converesly, a value of false
            (SHOW_CALLER_NAME) causes the method to behave as originally
            planned.
            </param>
        </member>
        <member name="T:WizardWrx.ParameterKeys">
            <summary>
            Class for transforming key-value pairs, in the format of private profile
            strings, into a NameValueCollection.
            </summary>
            <remarks>
            This class inherits from NameValueCollection, and uses its constructors
            to call the Split method against the key-value pair.
            </remarks>
        </member>
        <member name="M:WizardWrx.ParameterKeys.#ctor">
            <summary>
            The default constructor creates an empty class.
            </summary>
        </member>
        <member name="M:WizardWrx.ParameterKeys.#ctor(System.String[])">
            <summary>
            This constructor creates a new class, and initializes its members
            from the input array.
            </summary>
            <param name="pastrKVP">
            An array of strings, which is assumed to contain strings that are
            formatted like private profile key strings, with an equal sign as
            the delimiter.
            </param>
            <remarks>
            If the array is a null reference or a reference to an empty array,
            the constructor succeeds, returning an empty collection.
            
            Although subsequent equal signs are discouraged, they are ignored,
            and become part of the value string.
            </remarks>
        </member>
        <member name="M:WizardWrx.ParameterKeys.#ctor(System.String[],System.Char)">
            <summary>
            This constructor creates a new class, and initializes its members
            from the input array.
            </summary>
            <param name="pastrKVP">
            An array of strings, which is assumed to contain strings that are
            formatted like private profile key strings, with semething besides
            an equal sign as the delimiter.
            </param>
            <param name="pchrDlm">
            The character, presumably something besides an equal sign, that
            delimits keys from their values.
            
            The basis of this assumption is that there is a simpler constructor
            that expects the delimiter to be an equal sign.
            </param>
            <remarks>
            If the array is a null reference or a reference to an empty array,
            the constructor succeeds, returning an empty collection.
            
            If the delimiter is a null reference, the default delimiter, an
            equal sign, is used, and the constructor will succeed, although the
            collection that it returns may not be what you expect.
            
            Although subsequent delimiters are discouraged, they are ignored,
            and become part of the value string.
            </remarks>
        </member>
        <member name="M:WizardWrx.ParameterKeys.AddKey(System.String)">
            <summary>
            Add an individual key to the collection.
            </summary>
            <param name="pstrKVP">
            A string, which is a key-value pair, with the key and value
            delimited by the character specified in pachrDlm.
            </param>
            <returns>
            A String containing the key name, which the caller might want to
            cache.
            
            If the input string is null or empty, the method returns an empty
            string, which signals a failure.
            </returns>
        </member>
        <member name="M:WizardWrx.ParameterKeys.AddKey(System.String,System.Char)">
            <summary>
            Add an individual key to the collection.
            </summary>
            <param name="pstrKVP">
            A string, which is a key-value pair, with the key and value
            delimited by the character specified in pachrDlm.
            </param>
            <param name="pchrDlm">
            The character, presumably something besides an equal sign, that
            delimits keys from their values.
            
            The basis of this assumption is that there is a simpler constructor
            that expects the delimiter to be an equal sign.
            
            If this argument is null, the method behaves like the simpler
            version of this method.
            </param>
            <returns>
            A String containing the key name, which the caller might want to
            cache.
            
            If the input string is null or empty, the method returns an empty
            string, which signals a failure.
            </returns>
        </member>
        <member name="M:WizardWrx.ParameterKeys.SortKeys">
            <summary>
            Return a sorted list of the keys in this collection.
            </summary>
            <returns>
            A reference to an ArrayList object that contains an elment for each
            key in the collection.
            </returns>
        </member>
        <member name="M:WizardWrx.ParameterKeys.ArrayToKeys(System.String[],System.Char[])">
            <summary>
            Constructors call this function to add the key-value pairs to the array.
            </summary>
            <param name="pastrKVP">
            Array of strings, each of which is a key-value pair, with the key
            and value delimited by the character specified in pachrDlm.
            </param>
            <param name="pachrDlm">
            The array of characters, usually consisting of a single element,
            that delimis keys from their values.
            </param>
        </member>
        <member name="M:WizardWrx.ParameterKeys.AddKVP(System.String,System.Char[])">
            <summary>
            Methods use this function to add items to the collection.
            
            Constructors use this method, through ArrayToKeys, to add items to
            the collection.
            </summary>
            <param name="pstrKVP">
            A string, which is a key-value pair, with the key and value
            delimited by the character specified in pachrDlm.
            </param>
            <param name="pachrDlm"></param>
        </member>
        <member name="T:WizardWrx.HTMLDocs.Division">
            <summary>
            This little class provides a tidy way to return the ID and contents of a
            named division of a well formed HTML document.
            </summary>
        </member>
        <member name="M:WizardWrx.HTMLDocs.Division.#ctor(System.String,System.String)">
            <summary>
            Given the ID (DOM name) of a divsion, and its contents, return an
            object that can be used to efficiently keep them together, or pass
            around references to them, as a unit.
            
            Only named divisions are supported. 
            </summary>
            <param name="pstrDivID">
            String containing the ID (DOM name) of the divsion.
            Null references are invalid, but empty strings are allowed.
            </param>
            <param name="pstrDivContents">
            String containing the text of the named division. All text between
            the start and end tags is included. The tags, themselves, having
            served their purpose, are discarded.
            </param>
            <remarks>
            I anticiplate that most instances of this class will be promptly
            split apart, and used as the key and value, respectively, of a
            Dictionary item.
            
            The need for this class is motivated by the fact that the regular
            expression that I use in the companion Divisons class to extract the
            division yields both the ID and contents of the division. By saving
            both into an object of this type, I can avoid parsing the same text
            a second time to retrieve the content.
            </remarks>
        </member>
        <member name="P:WizardWrx.HTMLDocs.Division.Id">
            <summary>
            Returns a String containing the Division ID that was supplied to the
            constructor.
            </summary>
        </member>
        <member name="P:WizardWrx.HTMLDocs.Division.Contents">
            <summary>
            Returns a String containing the Division Contents string that was
            supplied to the constructor.
            </summary>
        </member>
        <member name="P:WizardWrx.HTMLDocs.Division.Title">
            <summary>
            Returns a String containing the Title of the contents of the
            division, read from the first Heading tag found within it.
            </summary>
        </member>
        <member name="T:WizardWrx.TextBlocks">
            <summary>
            Methods for creating and manipulating test blocks.
            </summary>
        </member>
        <member name="F:WizardWrx.TextBlocks.BLOCK_BEGIN_TEXT">
            <summary>
            My text block begin markers always end with this string.
            </summary>
        </member>
        <member name="F:WizardWrx.TextBlocks.BLOCK_END_TEXT">
            <summary>
            My text block ending markers always end with this string.
            </summary>
        </member>
        <member name="M:WizardWrx.TextBlocks.#ctor">
            <summary>
            The default constructor creates an empty class. Its MarkerText
            property must be set before its other properties are useful.
            </summary>
        </member>
        <member name="M:WizardWrx.TextBlocks.#ctor(System.String)">
            <summary>
            This overload creates an empty class, and initializes its MarkerText
            property.
            </summary>
            <param name="pstrMarkerText">
            String containing text from which marker prefixes and suffixes are
            constructed. Also sets the MarkerText property.
            </param>
        </member>
        <member name="M:WizardWrx.TextBlocks.#ctor(System.String,System.String)">
            <summary>
            This overload creates an empty class, and initializes its rInputData
            and MarkerText properties.
            </summary>
            <param name="pstrInputData">
            String containing text from which marked blocks will be extracted.
            Also sets the InputData property.
            </param>
            <param name="pstrMarkerText">
            String containing text from which marker prefixes and suffixes are
            constructed. Also sets the MarkerText property.
            </param>
        </member>
        <member name="M:WizardWrx.TextBlocks.ExtractBlock">
            <summary>
            Extract a block marked by text constructed from the string in the
            MarkerText property from the text in the InputData property.
            </summary>
            <returns>
            Text between block markers. If the prefix marker is followed by a
            newline, the newline is removed. Likewise, if the suffix marker is
            preceded by a newline, that newline is also removed.
            </returns>
        </member>
        <member name="M:WizardWrx.TextBlocks.ExtractBlock(System.String)">
            <summary>
            Extract a block marked by text constructed from the string in
            argument pstrMarkerText from the text in the InputData property, and
            update the MarkerText property.
            </summary>
            <param name="pstrMarkerText">
            String containing text from which marker prefixes and suffixes are
            constructed. Also sets the MarkerText property.
            </param>
            <returns>
            Text between block markers. If the prefix marker is followed by a
            newline, the newline is removed. Likewise, if the suffix marker is
            preceded by a newline, that newline is also removed.
            </returns>
        </member>
        <member name="M:WizardWrx.TextBlocks.ExtractBlock(System.String,System.String)">
            <summary>
            Extract a block marked by text constructed from the string in
            argument pstrMarkerText from the text in argument pstrInputData.
            Update the InputData and MarkerText properties.
            </summary>
            <param name="pstrInputData">
            String containing text from which marked blocks will be extracted.
            Also sets the InputData property.
            </param>
            <param name="pstrMarkerText">
            String containing text from which marker prefixes and suffixes are
            constructed. Also sets the MarkerText property.
            </param>
            <returns>
            Text between block markers. If the prefix marker is followed by a
            newline, the newline is removed. Likewise, if the suffix marker is
            preceded by a newline, that newline is also removed.
            </returns>
        </member>
        <member name="M:WizardWrx.TextBlocks.ExtractBlockToArray">
            <summary>
            Extract a block marked by text constructed from the string in
            argument pstrMarkerText from the text in argument pstrInputData.
            Update the InputData and MarkerText properties.
            </summary>
            <returns>
            Array of strings containing the text between block markers. If the
            prefix marker is followed by a newline, the newline is removed.
            Likewise, if the suffix marker is preceded by a newline, that
            newline is also removed.
            </returns>
        </member>
        <member name="M:WizardWrx.TextBlocks.ExtractBlockToArray(System.String)">
            <summary>
            Extract a block marked by text constructed from the string in
            argument pstrMarkerText from the text in argument pstrInputData.
            Update the InputData and MarkerText properties.
            </summary>
            <param name="pstrMarkerText">
            String containing text from which marker prefixes and suffixes are
            constructed. Also sets the MarkerText property.
            </param>
            <returns>
            Array of strings containing the text between block markers. If the
            prefix marker is followed by a newline, the newline is removed.
            Likewise, if the suffix marker is preceded by a newline, that
            newline is also removed.
            </returns>
        </member>
        <member name="M:WizardWrx.TextBlocks.ExtractBlockToArray(System.String,System.String)">
            <summary>
            Extract a block marked by text constructed from the string in
            argument pstrMarkerText from the text in argument pstrInputData.
            Update the InputData and MarkerText properties.
            </summary>
            <param name="pstrInputData">
            String containing text from which marked blocks will be extracted.
            Also sets the InputData property.
            </param>
            <param name="pstrMarkerText">
            String containing text from which marker prefixes and suffixes are
            constructed. Also sets the MarkerText property.
            </param>
            <returns>
            Array of strings containing the text between block markers. If the
            prefix marker is followed by a newline, the newline is removed.
            Likewise, if the suffix marker is preceded by a newline, that
            newline is also removed.
            </returns>
        </member>
        <member name="M:WizardWrx.TextBlocks.CharToArray(System.Char)">
            <summary>
            Return a one-element array containing the input character.
            </summary>
            <param name="pchr">
            Character to place into the returned array.
            </param>
            <returns>
            Array of characters, containing exactly one element, which contains
            the single input character.
            </returns>
        </member>
        <member name="M:WizardWrx.TextBlocks.StringOfLinesToArray(System.String)">
            <summary>
            Split a string containing lines of text into an array of strings.
            </summary>
            <param name="pstrLines">
            String containing lines of text, terminated by CR/LF pairs.
            </param>
            <returns>
            Array of strings, one line per string. Blank lines are preserved as
            empty strings.
            </returns>
        </member>
        <member name="M:WizardWrx.TextBlocks.StringOfLinesToArray(System.String,System.StringSplitOptions)">
            <summary>
            Split a string containing lines of text into an array of strings,
            as modified by the StringSplitOptions flag.
            </summary>
            <param name="pstrLines">
            String containing lines of text, terminated by CR/LF pairs.
            </param>
            <param name="penmStringSplitOptions">
            A member of the StringSplitOptions enumeration, presumably other
            than StringSplitOptions.None, which is assumed by the first
            overload. The only option supported by version 2 of the Microsoft
            .NET CLR is RemoveEmptyEntries.
            </param>
            <returns>
            Array of strings, one line per string. Blank lines are preserved as
            empty strings unless penmStringSplitOptions is RemoveEmptyEntries,
            as is most likely to be the case.
            </returns>
            <remarks>
            Use this overload to convert a string, discarding blank lines.
            </remarks>
        </member>
        <member name="M:WizardWrx.TextBlocks.StringToArray(System.String)">
            <summary>
            Return a one-element array containing the input string.
            </summary>
            <param name="pstr">
            String to place into the returned array.
            </param>
            <returns>
            Array of strings, containing exactly one element, which contains
            the single input string.
            </returns>
        </member>
        <member name="P:WizardWrx.TextBlocks.InputData">
            <summary>
            String from which to extract blocks.
            </summary>
        </member>
        <member name="P:WizardWrx.TextBlocks.MarkerText">
            <summary>
            This is the text that forms the middle (and variable) part of the 
            TextBlocks marker strings.
            </summary>
        </member>
        <member name="P:WizardWrx.TextBlocks.Prefix">
            <summary>
            Construct, on the fly, and return, the block prefix.
            </summary>
        </member>
        <member name="P:WizardWrx.TextBlocks.Suffix">
            <summary>
            Construct, on the fly, and return, the block suffix.
            </summary>
        </member>
        <member name="T:WizardWrx.StringTricks">
            <summary>
            This is a class of static functions for performing common tasks not
            provided by the System.String class.
            </summary>
        </member>
        <member name="F:WizardWrx.StringTricks.DEFAULT_TOKEN_DELM">
            <summary>
            Default token terminator string used by the version of public static
            method, MakeToken, which takes one argument.
            </summary>
        </member>
        <member name="M:WizardWrx.StringTricks.ArrayOfOne(System.Char)">
            <summary>
            Return a one-element array containing the input character, for use
            as input to the Split method of the system.string class.
            </summary>
            <param name="pchrTheCharacter">
            Character to use as the split delimiter.
            </param>
            <returns>
            Array of one element, ready to feed to the string.split method.
            </returns>
        </member>
        <member name="M:WizardWrx.StringTricks.ArrayOfOne(System.String)">
            <summary>
            Return a one-element array containing the input string, for use
            as input to the Split method of the system.string class.
            </summary>
            <param name="pstrTheString">
            String to use as the split delimiter.
            </param>
            <returns>
            Array of one element, ready to feed to the string.split method.
            </returns>
        </member>
        <member name="M:WizardWrx.StringTricks.CountSubstrings(System.String,System.String)">
             <summary>
             Strangely, the String class is missing an important static method to
             count substrings within a string. This is the missing method.
             </summary>
             <param name="pstrSource">
             String in which to count occurrances of substring pstrToCount.
            
             If pstrSource is null or empty, the method returns zero.
             </param>
             <param name="pstrToCount">
             Substring to count in string pstrSource. An empty string causes the
             method to return StandardConstants.STRING_INDEXOF_NOT_FOUND, or -1.
             </param>
             <returns>
             Number of times, if any, that string pstrToCount occurs in string
             pstrSource, or StandardConstants.STRING_INDEXOF_NOT_FOUND (-1) if
             pstrToCount is either null or empty.
             </returns>
        </member>
        <member name="M:WizardWrx.StringTricks.CountSubstrings(System.String,System.String,System.StringComparison)">
             <summary>
             Strangely, the String class is missing an important static method to
             count substrings within a string. This is the missing method.
             </summary>
             <param name="pstrSource">
             String in which to count occurrances of substring pstrToCount.
            
             If pstrSource is null or empty, the method returns zero.
             </param>
             <param name="pstrToCount">
             Substring to count in string pstrSource. An empty string causes the
             method to return StandardConstants.STRING_INDEXOF_NOT_FOUND, or -1.
             </param>
             <param name="penmComparisonType">
             A member of the StringComparison enumeration, which defines the
             rules for performing the comparison.
             </param>
             <returns>
             Number of times, if any, that string pstrToCount occurs in string
             pstrSource, or StandardConstants.STRING_INDEXOF_NOT_FOUND (-1) if
             pstrToCount is either null or empty.
             </returns>
        </member>
        <member name="M:WizardWrx.StringTricks.ExtractBetweenIndexOfs(System.String,System.Int32,System.Int32)">
            <summary>
            Extract the substring bounded by the characters at either end of it.
            </summary>
            <param name="pstrWholeString">
            Extract the substring from this string.
            </param>
            <param name="pintPosBegin">
            This integer is the position, given by IndexOf, of the character
            that bounds the left end of the desired substring.
            </param>
            <param name="pintPosEnd">
            This integer is the position, given by IndexOf, of the character
            that bounds the right end of the desired substring.
            </param>
            <returns>
            The returned substring begins with the character immediately to the
            right of the left hand bounding character, and ending with the last
            character before the right hand bounding character.
            </returns>
        </member>
        <member name="M:WizardWrx.StringTricks.ExtractBetweenIndexOfs(System.String,System.String,System.Int32,System.Int32)">
             <summary>
             Extract the substring bounded by the characters at either end of it.
             </summary>
             <param name="pstrWholeString">
             Extract the substring from this string.
             </param>
             <param name="pstrLeftMarker">
             This overload handles the case where the left boundary is bounded by
             a string. The method needs a copy of the string in order to find the
             true beginning of the substring to extract, and to compute its
             length.
             </param>
             <param name="pintPosBegin">
             This integer is the position, given by IndexOf, of the character
             that bounds the left end of the desired substring.
             </param>
             <param name="pintPosEnd">
             This integer is the position, given by IndexOf, of the character
             that bounds the right end of the desired substring.
             </param>
             <returns>
             The returned substring begins with the character immediately to the
             right of the left hand bounding character, and ending with the last
             character before the right hand bounding character.
            
             Inputs and computed values are thoroughly sanity checked to prevent
             run-time exceptions. If anything is out of order, an empty string is
             returned.
             </returns>
        </member>
        <member name="M:WizardWrx.StringTricks.ExtractBoundedSubstrings(System.String,System.Char)">
             <summary>
             Extract a substring that is bounded by a character. See Remarks.
             </summary>
             <param name="pstrWholeString">
             The substring is extracted from this string.
             </param>
             <param name="pchrBoundingCharacter">
             This is the bounding character. Please see Remarks.
             </param>
             <returns>
             This is the desired substring, without its bounding characters. See
             Remarks.
             </returns>
             <remarks>
             The left and right ends must be bounded by the same character. To
             extract a string bounded on each end by a different character, use
             the next overload.
            
             Inputs and computed values are thoroughly sanity checked to prevent
             run-time exceptions. If anything is out of order, an empty string is
             returned.
             </remarks>
        </member>
        <member name="M:WizardWrx.StringTricks.ExtractBoundedSubstrings(System.String,System.Char,System.Char)">
             <summary>
             Extract a substring that is bounded by a character. See Remarks.
             </summary>
             <param name="pstrWholeString">
             The substring is extracted from this string.
             </param>
             <param name="pchrLeftBound">
             This is the character that marks the left end of the string. See
             Remarks.
             </param>
             <param name="pchrRightBound">
             This is the character that marks the right end of the string. See
             Remarks.
             </param>
             <returns>
             This is the desired substring, without its bounding characters. See
             Remarks.
             </returns>
             <remarks>
             The left and right ends are expected to be bounded by different
             characters. To  extract a string bounded on each end by the same
             character, use the previous overload.
            
             Inputs and computed values are thoroughly sanity checked to prevent
             run-time exceptions. If anything is out of order, an empty string is
             returned.
             </remarks>
        </member>
        <member name="M:WizardWrx.StringTricks.ExtractBoundedSubstrings(System.String,System.String,System.String)">
             <summary>
             Extract a substring that is bounded by a pair of substrings. See
             Remarks.
             </summary>
             <param name="pstrWholeString">
             The substring is extracted from this string.
             </param>
             <param name="pstrLeftBound">
             This is the substring that marks the left end of the string. See
             Remarks.
             </param>
             <param name="pstrRightBound">
             This is the substring that marks the right end of the string. See
             Remarks.
             </param>
             <returns>
             This is the desired substring, without its bounding substrings. See
             Remarks.
             </returns>
             <remarks>
             The left and right ends are expected to be bounded by different
             substrings. To  extract a string bounded on each end by the same
             substring, use the same value for the third and fourth arguments.
            
             Inputs and computed values are thoroughly sanity checked to prevent
             run-time exceptions. If anything is out of order, an empty string is
             returned.
             </remarks>
        </member>
        <member name="M:WizardWrx.StringTricks.LengthOfLongestString(System.String[])">
            <summary>
            Given an array of strings, return the length of the longest string.
            </summary>
            <param name="pastrTheseStrings">
            The list of strings to evaluate is supplied as an array of strings,
            which may be an anonymous array, constructed on the fly in the
            argument list.
            </param>
            <returns>
            The return value is the length of the longest string. If the array
            is empty or is composed entirely of empty strings, the return value
            is zero. Since it begins with a null reference test, this routine is
            always successful.
            </returns>
            <remarks>
            Feed the return value to the PadRight method on a string to get back
            a string that, when used as a label, yields vertically aligned data.
            </remarks>
        </member>
        <member name="M:WizardWrx.StringTricks.MakeToken(System.String)">
             <summary>
             Given a string containing the name of a form control (field) or
             other token, create its place holder token.
             </summary>
             <param name="pstrFieldName">
             String containing the name of the token.
             </param>
             <returns>
             String containing the text of the corresponding template text place
             holder. See Remarks.
             </returns>
             <remarks>
             The string is constructed by appending a standard token delimiter,
             which is a pair of dollar signs, to each end of the string.
            
             The token is exposed as a static property, DEFAULT_TOKEN_DELM.
             </remarks>
        </member>
        <member name="M:WizardWrx.StringTricks.MakeToken(System.String,System.String)">
            <summary>
            Given a string containing the name of a form control (field) or
            other token, and another string containing a static token, create
            its place holder token.
            </summary>
            <param name="pstrFieldName">
            String containing the name of the token.
            </param>
            <param name="pstrTokenEnds"></param>
            <returns>
            The string is constructed by appending the token delimiter specified
            in argument pstrTokenEnds to both ends of the string specified in
            argument pstrFieldName.
            </returns>
        </member>
        <member name="M:WizardWrx.StringTricks.QuoteString(System.String)">
            <summary>
            Append a quote character to both ends of a string, unless it is
            already present.
            </summary>
            <param name="pstrIn">
            String to evaluate, which may, or may not, end with the characterr
            specified in pchrEnd.
            </param>
            <returns>
            String with quote character at both ends.
            </returns>
        </member>
        <member name="M:WizardWrx.StringTricks.EncloseInChar(System.String,System.Char)">
            <summary>
            Append a specified character to both ends of a string, unless it is
            already present.
            </summary>
            <param name="pstrIn">
            String to evaluate, which may, or may not, end with the characterr
            specified in pchrEnd.
            </param>
            <param name="pchrEnd">
            Character to append, if absent.
            </param>
            <returns>
            String with character pchrEnd at both ends.
            </returns>
        </member>
        <member name="M:WizardWrx.StringTricks.RemoveEndQuotes(System.String)">
            <summary>
            Remove ending quotation marks from a string, if present.
            </summary>
            <param name="pstrIn">
            String to evaluate, which may, or may not, end with quotes.
            </param>
            <returns>
            String with ending quotes, if present, removed.
            </returns>
        </member>
        <member name="M:WizardWrx.StringTricks.RemoveEndChars(System.String,System.Char)">
            <summary>
            Remove ending character, such as brackets, from a string, if present.
            </summary>
            <param name="pstrIn">
            String to evaluate, which may, or may not, end with the characterr
            specified in pchrEnd.
            </param>
            <param name="pchrEnd">
            Character to remove, if present.
            </param>
            <returns>
            String with character pchrEnd removed from both ends.
            </returns>
        </member>
        <member name="M:WizardWrx.StringTricks.ReplaceToken(System.String,System.String,System.String)">
             <summary>
             Given a string of text, another string of place holder text, which
             occurs zero or more times in the input string, return a string in
             which the place holder text is replaced with new text, supplied by
             the third argument.
             </summary>
             <param name="pstrToSearch">
             String to be searched and changed.
             </param>
             <param name="pstrToFind">
             String to be found and replaced.
             </param>
             <param name="strReplaceWith">
             String to substitute for all occurrances of string pstrToFind.
             </param>
             <returns>
             String pstrToSearch, with all ocurrances of string pstrToFind
             replaced with string strReplaceWith.
             </returns>
             <remarks>
             The Replace method of the String class behaves in a way that is
             counterintuitive to me, although this behavior is a direct
             consequence of, and consistent with, the characterization of strings
             as immutable objects.
            
             Unlike the Replace method of a String object, this static method
             returns a new String object.
            
             As a bonus, this function accepts string constants for all three
             arguments, although their most practical application is for the
             first two. This overcomes the second, and, in some ways, most
             serious, limitation of the Replace method on a String object, which
             is that string constants are devoid of a Replace method.
            
             One last dirty little secret; this method actually calls the Replace
             method on argument pstrToSearch, which is, in all cases, a first
             class String object, sporting a full ocmplement of properties and
             methods.
            
             Say it's syntactic sugar if you insist, but I'll keep using it in my
             code, and may eventually implement a version that takes references
             as arguments.
             </remarks>
        </member>
        <member name="M:WizardWrx.StringTricks.ReplaceTokensFromList(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Given a string containing tokens of the form "^^ListKeyValue^^"
            where ListKeyValue is the value of a key in the pnvcList collection,
            which may or may not exist in the collection, replace all such
            tokens with the contents of the like named value in the collection.
            </summary>
            <param name="pstrMsg">
            String containing the message containing the substitution tokens.
            </param>
            <param name="pnvcList">
            A NameValueCollection, in which each key represents a token, and its
            value represents the value to be substituted for it.
            </param>
            <returns>
            String with tokens replaced, and tokens that have no corresponding
            object in the pnvcList collection preserved.
            </returns>
        </member>
        <member name="M:WizardWrx.StringTricks.ReplaceTokensFromList(System.String,System.Collections.Specialized.NameValueCollection,System.Collections.Specialized.NameValueCollection)">
             <summary>
             Replace place holders (markers) with the value of the corresponding
             form control (field), or a default value, if the field is empty and
             a default is designated.
             </summary>
             <param name="pstrTemplate">
             String containing a template containing the text and place markers.
             </param>
             <param name="pnvcFields">
             NameValueCollection containing the form control (field) values.
             </param>
             <param name="pnvcDefaults">
             NameValueCollection containing the form control (field) or token
             default values.
            
             Default values are optional. If omitted, the method substitutes an
             empty string.
             </param>
             <returns>
             String containing the text in the template, with all tokens
             formatted with default endings replaced by the contents of the
             corresponding, and like named, control (field) on the input form.
            
             Tokens bounded by "##" are replaced by strings from the Session
             variables collection. The same defaults collection is used for both.
             </returns>
        </member>
        <member name="M:WizardWrx.StringTricks.ReplaceTokensFromList(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
             <summary>
             Given a string containing tokens of the form "^^ListKeyValue^^"
             where ListKeyValue is the value of a key in the pnvcList collection,
             which may or may not exist in the collection, replace all such
             tokens with the contents of the like named value in the collection.
             </summary>
             <param name="pstrMsg">
             String containing the message containing the substitution tokens.
             </param>
             <param name="pdctList">
             A Dictionary, in which each key represents a token, and its value
             represents the value to be substituted for it.
            
             The Dictionary may contain anything, as it accepts any Object. The
             required substitution string is obtained by calling the default
             ToString method on each Object. To supply a format string, which
             will be applied to each Object, in turn, use the next overload.
             </param>
             <returns>
             String with tokens replaced, and tokens that have no corresponding
             object in the pnvcList collection preserved.
             </returns>
        </member>
        <member name="M:WizardWrx.StringTricks.ReplaceTokensFromList(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object})">
             <summary>
             Given a string containing tokens of the form "^^ListKeyValue^^"
             where ListKeyValue is the value of a key in the pnvcList collection,
             which may or may not exist in the collection, replace all such
             tokens with the contents of the like named value in the collection.
             </summary>
             <param name="pstrMsg">
             String containing the message containing the substitution tokens.
             </param>
             <param name="pdctList">
             A Dictionary, in which each key represents a token, and its value
             represents the value to be substituted for it.
            
             The Dictionary may contain anything, as it accepts any Object. The
             required substitution string is obtained by calling the default
             ToString method on each Object. To supply a format string, which
             will be applied to each Object, in turn, use the next overload.
             </param>
             <param name="pdctDefaults">
             A Dictionary, in which each key represents a token, and its value
             represents the default value to be substituted for it, if there is
             no corresponding key in dictionary pdctList.
            
             The Dictionary may contain anything, as it accepts any Object. The
             required substitution string is obtained by calling the default
             ToString method on each Object. To supply a format string, which
             will be applied to each Object, in turn, use the next overload.
             </param>
             <returns>
             String with tokens replaced, and tokens that have no corresponding
             object in the pnvcList OR the pdctDefaults collection preserved.
             </returns>
        </member>
        <member name="M:WizardWrx.StringTricks.ReplaceTokensFromList(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
             <summary>
             Given a string containing tokens of the form "^^ListKeyValue^^"
             where ListKeyValue is the value of a key in the pnvcList collection,
             which may or may not exist in the collection, replace all such
             tokens with the contents of the like named session object.
             </summary>
             <param name="pstrMsg">
             String containing the message containing the substitution tokens.
             </param>
             <param name="pdctList">
             A Dictionary, in which each key represents a token, and its value
             represents the value to be substituted for it.
            
             The Dictionary may contain anything, as it accepts any Object. The
             required substitution string is obtained by calling the default
             ToString method on each Object. To supply a format string, which
             will be applied to each Object, in turn, use the next overload.
             </param>
             <param name="pstrFormat">
             Format string, acceptable to the static String.Format method, which
             is used to format the string representation of each object.
            
             The string must contain a "[0}" placeholder, which may occur one or
             more times in the format string, which is replaced by the string
             returned by the ToString method of each object.
             </param>
             <returns>
             String with tokens replaced, and tokens that have no corresponding
             object in the pnvcList collection preserved.
             </returns>
        </member>
        <member name="M:WizardWrx.StringTricks.ReplaceTokensFromList(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
             <summary>
             Given a string containing tokens of the form "^^ListKeyValue^^"
             where ListKeyValue is the value of a key in the pnvcList collection,
             which may or may not exist in the collection, replace all such
             tokens with the contents of the like named session object.
             </summary>
             <param name="pstrMsg">
             String containing the message containing the substitution tokens.
             </param>
             <param name="pdctList">
             A Dictionary, in which each key represents a token, and its value
             represents the value to be substituted for it.
            
             The Dictionary may contain anything, as it accepts any Object. The
             required substitution string is obtained by calling the default
             ToString method on each Object. To supply a format string, which
             will be applied to each Object, in turn, use the next overload.
             </param>
             <param name="pdctDefaults">
             A Dictionary, in which each key represents a token, and its value
             represents the default value to be substituted for it, if there is
             no corresponding key in dictionary pdctList.
            
             The Dictionary may contain anything, as it accepts any Object. The
             required substitution string is obtained by calling the default
             ToString method on each Object. To supply a format string, which
             will be applied to each Object, in turn, use the next overload.
             </param>
             <param name="pstrFormat">
             Format string, acceptable to the static String.Format method, which
             is used to format the string representation of each object.
            
             The string must contain a "[0}" placeholder, which may occur one or
             more times in the format string, which is replaced by the string
             returned by the ToString method of each object.
             </param>
             <returns>
             String with tokens replaced, and tokens that have no corresponding
             object in the pnvcList OR the pdctDefaults collection preserved.
             </returns>
        </member>
        <member name="M:WizardWrx.StringTricks.ParseCommentInHTMLComment(System.String)">
            <summary>
            Extract parameters, expressed as key-value pairs, from a standard
            HTML comment.
            </summary>
            <param name="pstrInput">
            String containing a well formed HTML comment, surrounding the
            key-value pairs. If the string is not a well formed HTML comment,
            with a single space between the comment delimiters and the body,
            or the string is null or empty, the returned collection is empty.
            </param>
            <returns>
            A NameValueCollection of parameter names and values, which may be
            empty, but is guaranteed to be returned, empty or not.
            </returns>
        </member>
        <member name="M:WizardWrx.StringTricks.Truncate(System.String,System.Int32)">
             <summary>
             Supply the missing Truncate function to members of the String class.
             </summary>
             <param name="pstrSource">
             String to truncate, if it is longer than pintMaxLength.
            
             A null string is treated as an empty string, and the return value
             for either is an empty string.
             </param>
             <param name="pintMaxLength">
             Desired maximum length of the returned string. If pstrSource is
             longer than pintMaxLength characters, the first pintMaxLength are
             returned. Otherwise, the whole string is returned.
            
             If pintMaxLength is less than or equal to zero, an empty string is
             returned.
             </param>
             <returns>
             If the string length is less than or equal to the specified maximum
             length, the whole string is returned.
            
             Otherwise, the first pintMaxLength characters are returned.
            
             Regardless, the return value is a new System.String object.
             </returns>
        </member>
        <member name="T:WizardWrx.BitMask32">
            <summary>
            This object exposes properties and methods to simplify using masks of up
            to 32 bits in day to day programming.
            </summary>
        </member>
        <member name="F:WizardWrx.BitMask32.BIT_01">
            <summary>
            Bit 1
            </summary>
        </member>
        <member name="F:WizardWrx.BitMask32.BIT_02">
            <summary>
            Bit 2
            </summary>
        </member>
        <member name="F:WizardWrx.BitMask32.BIT_03">
            <summary>
            Bit 3
            </summary>
        </member>
        <member name="F:WizardWrx.BitMask32.BIT_04">
            <summary>
            Bit 4
            </summary>
        </member>
        <member name="F:WizardWrx.BitMask32.BIT_05">
            <summary>
            Bit 5
            </summary>
        </member>
        <member name="F:WizardWrx.BitMask32.BIT_06">
            <summary>
            Bit 6
            </summary>
        </member>
        <member name="F:WizardWrx.BitMask32.BIT_07">
            <summary>
            Bit 7
            </summary>
        </member>
        <member name="F:WizardWrx.BitMask32.BIT_08">
            <summary>
            Bit 8
            </summary>
        </member>
        <member name="F:WizardWrx.BitMask32.BIT_09">
            <summary>
            Bit 9
            </summary>
        </member>
        <member name="F:WizardWrx.BitMask32.BIT_10">
            <summary>
            Bit 10
            </summary>
        </member>
        <member name="F:WizardWrx.BitMask32.BIT_11">
            <summary>
            Bit 11
            </summary>
        </member>
        <member name="F:WizardWrx.BitMask32.BIT_12">
            <summary>
            Bit 12
            </summary>
        </member>
        <member name="F:WizardWrx.BitMask32.BIT_13">
            <summary>
            Bit 13
            </summary>
        </member>
        <member name="F:WizardWrx.BitMask32.BIT_14">
            <summary>
            Bit 14
            </summary>
        </member>
        <member name="F:WizardWrx.BitMask32.BIT_15">
            <summary>
            Bit 15
            </summary>
        </member>
        <member name="F:WizardWrx.BitMask32.BIT_16">
            <summary>
            Bit 16
            </summary>
        </member>
        <member name="F:WizardWrx.BitMask32.BIT_17">
            <summary>
            Bit 17
            </summary>
        </member>
        <member name="F:WizardWrx.BitMask32.BIT_18">
            <summary>
            Bit 18
            </summary>
        </member>
        <member name="F:WizardWrx.BitMask32.BIT_19">
            <summary>
            Bit 19
            </summary>
        </member>
        <member name="F:WizardWrx.BitMask32.BIT_20">
            <summary>
            Bit 20
            </summary>
        </member>
        <member name="F:WizardWrx.BitMask32.BIT_21">
            <summary>
            Bit 21
            </summary>
        </member>
        <member name="F:WizardWrx.BitMask32.BIT_22">
            <summary>
            Bit 22
            </summary>
        </member>
        <member name="F:WizardWrx.BitMask32.BIT_23">
            <summary>
            Bit 23
            </summary>
        </member>
        <member name="F:WizardWrx.BitMask32.BIT_24">
            <summary>
            Bit 24
            </summary>
        </member>
        <member name="F:WizardWrx.BitMask32.BIT_25">
            <summary>
            Bit 25
            </summary>
        </member>
        <member name="F:WizardWrx.BitMask32.BIT_26">
            <summary>
            Bit 26
            </summary>
        </member>
        <member name="F:WizardWrx.BitMask32.BIT_27">
            <summary>
            Bit 27
            </summary>
        </member>
        <member name="F:WizardWrx.BitMask32.BIT_28">
            <summary>
            Bit 28
            </summary>
        </member>
        <member name="F:WizardWrx.BitMask32.BIT_29">
            <summary>
            Bit 29
            </summary>
        </member>
        <member name="F:WizardWrx.BitMask32.BIT_30">
            <summary>
            Bit 30
            </summary>
        </member>
        <member name="F:WizardWrx.BitMask32.BIT_31">
            <summary>
            Bit 31
            </summary>
        </member>
        <member name="F:WizardWrx.BitMask32.BIT_32">
            <summary>
            Bit 32
            </summary>
        </member>
        <member name="F:WizardWrx.BitMask32.ON">
            <summary>
            This symbolic constant for identifying a bit as ON maps to bool true.
            </summary>
        </member>
        <member name="F:WizardWrx.BitMask32.OFF">
            <summary>
            This symbolic constant for identifying a bit as OFF maps to bool false.
            </summary>
        </member>
        <member name="F:WizardWrx.BitMask32.BIT_NBR_MAX">
            <summary>
            Since this class numbers bits from 1. the highest supported bit number is 32.
            </summary>
        </member>
        <member name="F:WizardWrx.BitMask32.BIT_NBR_MIN">
            <summary>
            Since this class numbers bits from 1. the first bit number is 1.
            </summary>
        </member>
        <member name="M:WizardWrx.BitMask32.#ctor">
            <summary>
            This default constructor for a BitMask32 object creates an object
            with all bits OFF.
            </summary>
        </member>
        <member name="M:WizardWrx.BitMask32.#ctor(System.UInt32)">
            <summary>
            This overloaded constructor for a BitMask32 object creates an object
            with a specified initial value.
            </summary>
            <param name="puintInitialValue"></param>
        </member>
        <member name="M:WizardWrx.BitMask32.BitOff(System.Int32)">
            <summary>
            Turn a specified bit in the _uintBitMask instance variable OFF.
            </summary>
            <param name="pintBitNumber">
            Ordinal number of bit to turn OFF. Bits are numbered from 1 to 32,
            with 1 being the least significant bit.
            </param>
            <remarks>
            This code uses a temporary instance of the BitMask32 class, which is
            discarded as the method returns.
            
            Since neither operand of the exclusive-OR assignment operator can be
            a BitMask32 object _ubmTheBit must be cast to UInt32, using the
            implicit operator UInt32, defined elsewhere in this class. Private
            variable _uintBitMask is already a UInt32.
            </remarks>
        </member>
        <member name="M:WizardWrx.BitMask32.BitOn(System.Int32)">
            <summary>
            Turn a specified bit in the _uintBitMask instance variable ON.
            </summary>
            <param name="pintBitNumber">
            Ordinal number of bit to turn ON. Bits are numbered from 1 to 32,
            with 1 being the least significant bit.
            </param>
            <remarks>
            This code uses a temporary instance of the BitMask32 class, which is
            discarded as the method returns.
            
            Since neither operand of the logical OR assignment operator can be
            a BitMask32 object _ubmTheBit must be cast to UInt32, using the
            implicit operator UInt32, defined elsewhere in this class. Private
            variable _uintBitMask is already a UInt32.
            </remarks>
        </member>
        <member name="M:WizardWrx.BitMask32.IsBitOff(System.Int32)">
            <summary>
            Test the state of a specified bit, returning TRUE if it is OFF.
            </summary>
            <param name="pintBitNumber">
            Ordinal number of bit to evaluate. Bits are numbered from 1 to 32,
            with 1 being the least significant bit.
            </param>
            <returns>
            TRUE if the specified bit is ON, else FALSE.
            </returns>
            <remarks>
            This code uses a temporary instance of the BitMask32 class, which is
            discarded as the method returns.
            
            Unlike the BitOff and BitOn operators, everything is already cast to
            Uint32. Therefore, this method works just fine without any casts.
            
            Since this code is unlikely to change, it uses the most concise form
            of the IF statement, which supports a single executable statement in
            each branch.
            </remarks>
        </member>
        <member name="M:WizardWrx.BitMask32.IsBitOn(System.Int32)">
            <summary>
            Test the state of a specified bit, returning TRUE if it is ON.
            </summary>
            <param name="pintBitNumber">
            Ordinal number of bit to evaluate. Bits are numbered from 1 to 32,
            with 1 being the least significant bit.
            </param>
            <returns>
            TRUE if the specified bit is ON, else FALSE.
            </returns>
            <remarks>
            This code uses a temporary instance of the BitMask32 class, which is
            discarded as the method returns.
            
            Unlike the BitOff and BitOn operators, everything is already cast to
            Uint32. Therefore, this method works just fine without any casts.
            
            Since this code is unlikely to change, it uses the most concise form
            of the IF statement, which supports a single executable statement in
            each branch.
            </remarks>
        </member>
        <member name="M:WizardWrx.BitMask32.TurnBitOff(System.Int32)">
            <summary>
            Return a new BitMask32 object, in which a specified bit is turned ON, and
            all others are OFF.
            </summary>
            <param name="pintBitNumber">
            Ordinal number of bit to turn OFF. Bits are numbered from 1 to 32,
            with 1 being the least significant bit.
            </param>
            <returns>
            A new BitMask32 object with a single bit turned OFF, and all others
            already turend OFF.
            </returns>
            <remarks>
            In essence, this method returns an instance of the BitMask32 created
            by calling its default constructor.
            
            This method and its companion, TurnBitOn, bounds checks its input,
            notwithstanding the fact that the bitwise operators discard the high
            bits in the bit count operand of the left logical shift operator.
            
            Since all instance methods call these static methods, these bounds
            checks suffice for the entire class.
            </remarks>
        </member>
        <member name="M:WizardWrx.BitMask32.TurnBitOn(System.Int32)">
            <summary>
            Return a new BitMask32 with its pintBitNumberth bit turned ON.
            </summary>
            <param name="pintBitNumber">
            Number of bit to turn on with bits numbered from 1 to 32, starting
            with Bit 1 as the least significant bit.
            </param>
            <returns>
            A new BitMask32 object, with the specified bit ON and all others OFF.
            </returns>
            <remarks>
            This method and its companion, TurnBitOff, bounds checks its input,
            notwithstanding the fact that the bitwise operators discard the high
            bits in the bit count operand of the left logical shift operator.
            
            Since all instance methods call these static methods, these bounds
            checks suffice for the entire class.
            </remarks>
        </member>
        <member name="M:WizardWrx.BitMask32.ToString">
            <summary>
            Override the ToString method to provide a useful output, in the form
            of a hexadecimal representation of the value of its bit mask.
            </summary>
            <returns>
            A String representation of the private variable that holds the
            current value of the bit mask, formatted as a hexadecimal
            representation of its value.
            </returns>
        </member>
        <member name="M:WizardWrx.BitMask32.Equals(System.Object)">
            <summary>
            Override the default Equals method, so that class instances can
            participate in meaningful equality tests.
            </summary>
            <param name="pComparand">
            A reference to a generic object to be compared against the current
            instance.
            </param>
            <returns>
            True if the two meet our definition of Equals, which is that the two
            bit masks are equal.
            </returns>
        </member>
        <member name="M:WizardWrx.BitMask32.GetHashCode">
            <summary>
            This class overrides the GetHashCode method of its base class to
            return the hash code for the uint32 primitive that stores its data.
            </summary>
            <returns>
            An Integer which is the value returned by the GetHashCode method of
            the uint32 object.
            </returns>
        </member>
        <member name="M:WizardWrx.BitMask32.Equals(WizardWrx.BitMask32)">
            <summary>
            Provide a typecast version of the generic Equals method.
            </summary>
            <param name="pComparand">
            </param>
            A reference to another instance of the BitMask32 class, to be
            compared against the current instance.
            <returns>
            True if the two meet our definition of Equals, which is that the two
            bit masks are equal.
            </returns>
        </member>
        <member name="M:WizardWrx.BitMask32.op_Equality(WizardWrx.BitMask32,WizardWrx.BitMask32)">
            <summary>
            Though not recommended, members of this class override the equality
            and inequality operators.
            </summary>
            <param name="pobjLValue">
            Value on left of equal sign, otherwise known as the LValue or left
            operand.
            </param>
            <param name="pobjRValue">
            Value on right of equal sign, otherwise known as the RValue or right
            operand.
            </param>
            <returns>
            True if both value are equal, or if they refer to the same object.
            </returns>
        </member>
        <member name="M:WizardWrx.BitMask32.op_Inequality(WizardWrx.BitMask32,WizardWrx.BitMask32)">
            <summary>
            Though not recommended, members of this class override the equality
            and inequality operators.
            </summary>
            <param name="pobjLValue">
            Value on left of equal sign, otherwise known as the LValue or left
            operand.
            </param>
            <param name="pojbRValue">
            Value on right of equal sign, otherwise known as the RValue or right
            operand.
            </param>
            <returns>
            Inverse of the value returned by the overloaded equals operator.
            </returns>
        </member>
        <member name="M:WizardWrx.BitMask32.op_Implicit(WizardWrx.BitMask32)~System.UInt32">
            <summary>
            Cast a BitMask32 object to its underlying type, UInt32.
            </summary>
            <param name="pMask">
            The BitMask32 to be cast to a UInt32.
            </param>
            <returns>
            A reference to its input variable, cast to a UInt32.
            </returns>
        </member>
        <member name="M:WizardWrx.BitMask32.op_Implicit(System.UInt32)~WizardWrx.BitMask32">
            <summary>
            Cast a Uint32, the underlying type of a BitMask32, to an object of
            type BitMask32.
            </summary>
            <param name="pUInt32">
            The Uint32 to be cast to a BitMask32.
            </param>
            <returns>
            A reference to its input variable, cast to a BitMask32.
            </returns>
        </member>
        <member name="T:WizardWrx.My">
            <summary>
            This class both emulates and extends the My class found in the namespace
            of every Visual Basic .NET program.
            </summary>
        </member>
        <member name="F:WizardWrx.My.NAME_ONLY">
            <summary>
            Return only the base name, which is usually the same as the
            base name of the file that contains the assembly.
            </summary>
        </member>
        <member name="F:WizardWrx.My.NAME_AND_VERSION_ONLY">
            <summary>
            Return the name and version parts of the assembly's FullName
            property.
            </summary>
        </member>
        <member name="F:WizardWrx.My.FULLNAME_PART_DLM">
            <summary>
            The Assembly.FullName property is divided into segments, separated
            by commas. This constant is used internally to parse the string,
            but might have utility outside the class.
            </summary>
        </member>
        <member name="F:WizardWrx.My.NAME_PART_DLM">
            <summary>
            in certain cases, the full name of an assembly is returned in a
            slightly different format, in which the delimiter between its four
            parts is a comma followed by a space.
            </summary>
        </member>
        <member name="F:WizardWrx.My.FULLNAME_PART_DLM_ARRAY_OF_ONE">
            <summary>
            This static (shared in Visual Basic) single-element array eliminates
            the need for an anonymous array in calls to the static Split and
            Join methods of the System.String class.
            
            See FULLNAME_PART_DLM for details about the constant element.
            </summary>
        </member>
        <member name="F:WizardWrx.My.NAME_PART_DLM_ARRAY_OF_ONE">
            <summary>
            This static (shared in Visual Basic) single-element array eliminates
            the need for an anonymous array in calls to the static Split and
            Join methods of the System.String class.
            
            See NAME_PART_DLM for details about the constant element.
            </summary>
        </member>
        <member name="M:WizardWrx.My.#ctor">
            <summary>
            This constructor returns a read only reflected reference to the
            executing assembly.
            </summary>
        </member>
        <member name="M:WizardWrx.My.#ctor(System.Object)">
            <summary>
            This alternate constructor for this class takes a reference to an
            object, which is, for example, the Program class of a console
            application.
            </summary>
            <param name="pobjAny">
            Reference to any object for which you need access to the properties
            of the Assembly that contains it.
            </param>
        </member>
        <member name="M:WizardWrx.My.NameVersionString(System.Int32)">
            <summary>
            Given an integer, indicating how many segments of the full name of
            the assembly are desired, return the requested number of parts.
            </summary>
            <param name="pintNParts">
            Integer specifying the number of parts of the name to return. The
            higher the number, the more complete is the returned name.
            </param>
            <returns>
            String containing the requested parts of the assembly's FullName
            property.
            </returns>
        </member>
        <member name="M:WizardWrx.My.NameVersionString(WizardWrx.My.HowManyFullNameParts)">
            <summary>
            Given an integer, indicating how many segments of the full name of
            the assembly are desired, return the requested number of parts.
            </summary>
            <param name="penmHowManyFullNameParts">
            Member of the HowManyFullNameParts enumeration, specifying the number of
            parts of the name to return. The higher the number, the more
            complete is the returned name.
            </param>
            <returns>
            String containing the requested parts of the assembly's FullName
            property.
            </returns>
        </member>
        <member name="M:WizardWrx.My.AssemblyVersionString(System.Object,System.Int32)">
            <summary>
            Get the assembly to which the specified class belongs, and parse its
            FullName string, returning the specified number of parts of it.
            </summary>
            <param name="pobjAny">
            Reference to an object whose assembly name is requred.
            </param>
            <param name="pintNParts">
            Integer specifying the number of parts of the name to return. The
            higher the number, the more complete is the returned name.
            </param>
            <returns>
            String containing the requested parts of the assembly's FullName
            property.
            </returns>
        </member>
        <member name="M:WizardWrx.My.AssemblyVersionString(System.Object,WizardWrx.My.HowManyFullNameParts)">
            <summary>
            Get the assembly to which the specified class belongs, and parse its
            FullName string, returning the specified number of parts of it.
            </summary>
            <param name="pobjAny">
            Reference to an object whose assembly name is requred.
            </param>
            <param name="penmHowManyFullNameParts">
            Member of the HowManyFullNameParts enumeration, specifying the number of
            parts of the name to return. The higher the number, the more
            complete is the returned name.
            </param>
            <returns>
            String containing the requested parts of the assembly's FullName
            property.
            </returns>
        </member>
        <member name="M:WizardWrx.My.AssemblyVersionString(System.Reflection.Assembly,System.Int32)">
            <summary>
            Parse the FullName string of the specified Aeembly, returning the
            specified number of parts of it.
            </summary>
            <param name="pasmMe">
            Reference to the Assembly whose FullName is to be parsed.
            </param>
            <param name="pintNParts">
            Integer specifying the number of parts of the name to return. The
            higher the number, the more complete is the returned name.
            </param>
            <returns>
            String containing the requested parts of the assembly's FullName
            property.
            </returns>
        </member>
        <member name="M:WizardWrx.My.AssemblyVersionString(System.Reflection.Assembly,WizardWrx.My.HowManyFullNameParts)">
            <summary>
            Parse the FullName string of the specified Aeembly, returning the
            specified number of parts of it.
            </summary>
            <param name="pasmMe">
            Reference to the Assembly whose FullName is to be parsed.
            </param>
            <param name="penmHowManyFullNameParts">
            Member of the HowManyFullNameParts enumeration, specifying the number of
            parts of the name to return. The higher the number, the more
            complete is the returned name.
            </param>
            <returns>
            String containing the requested parts of the assembly's FullName
            property.
            </returns>
        </member>
        <member name="M:WizardWrx.My.ExtractAseemblyInfoItem(System.String@,System.String)">
            <summary>
            Given a reference to a long string, containing the contents of an
            AssemblyInfo.cs file, minus its Byte Order Mark, and a reference to
            the label, return the corresponding value from the AssemblyInfo.cs
            file.
            </summary>
            <param name="pstrAssemblyInfo">
            String containing the contents of the AssemblyInfo.cs file to parse.
            You can use the ReadToEnd method of a StreamReader object, which you
            must either accept the default text encoding of UTF8, or explicitly
            specify that encoding when you create your StreamReader object.
            </param>
            <param name="pstrLabel">
            The label of the item sought. For example, to get the AssemblyTitle,
            specify "AssemblyTitle" only. This method supplies the rest. By this
            means, any of the standard properties, including ComVisible, can be
            extracted.
            </param>
            <returns>
            String containing the value of the sought property, if it has been
            set. The returned string may be empty. The returned value is always
            a string, even for the Boolean ComVisible property.
            </returns>
        </member>
        <member name="M:WizardWrx.My.ExtractFullnamePart(System.String,WizardWrx.My.FullNamePart)">
            <summary>
            Given a copy of the string returned by the AssemblyFullName property of an
            assembly, extract and return a specified part of the name.
            </summary>
            <param name="pstrFullName">
            String containing the AssemblyFullName property to parse.
            </param>
            <param name="penmWhicPart">
            Member of the FullNamePart enumeration, which identifies, by its common
            name, the part to extract and return.
            </param>
            <returns>
            String containing the selected part of the AssemblyFullName. 
            </returns>
        </member>
        <member name="M:WizardWrx.My.SetTheClock">
            <summary>
            This private instance method is responsible for initializing the two
            startup time properties.
            </summary>
        </member>
        <member name="P:WizardWrx.My.AssembyDirName">
            <summary>
            Returns a String containing the name of the directory that contains
            the file in which the Assembly to which the object named in the
            class constructor belongs is stored.
            
            The returned string comes without a trailing path delimiter, so one
            must be appended if you intend to use it as the starting point for a
            fully qualified path or file name.
            
            Read only.
            </summary>
        </member>
        <member name="P:WizardWrx.My.AssemblyFileName">
            <summary>
            Returns a String containing the name of the file in which the
            Assembly to which the object named in the class constructor
            belongs is stored. The returned string includes the extension,
            if any.
            
            Read only.
            </summary>
        </member>
        <member name="P:WizardWrx.My.AssemblyGuidAttrib">
            <summary>
            Return the GuidAttribute assigned to the assembly, and stored in its
            AssemblyInfo document.
            
            Read only.
            </summary>
            <remarks>
            References: "How to get C# Assembly GUID"
                        http://c-sharp-programming.blogspot.com/2008/08/how-to-get-c-assembly-guid.html
            
            However, since the syntax editor didn't see Value as a property of
            the generic Object class, I created a new GuidAttribute object, and
            cast the GUID attribute object to it. That worked just as expected.
            </remarks>
            <seealso cref="P:WizardWrx.My.AssemblyGuidString"/>
        </member>
        <member name="P:WizardWrx.My.AssemblyGuidString">
            <summary>
            Return the GUID string assigned to the assembly, and stored in its
            AssemblyInfo document.
            </summary>
            <remarks>
            References: "How to get C# Assembly GUID"
                        http://c-sharp-programming.blogspot.com/2008/08/how-to-get-c-assembly-guid.html
            
            However, since the syntax editor didn't see Value as a property of
            the generic Object class, I created a new GuidAttribute object, and
            cast the GUID attribute object to it. That worked just as expected.
            
            Read only.
            </remarks>
            <seealso cref="P:WizardWrx.My.AssemblyGuidAttrib"/>
        </member>
        <member name="P:WizardWrx.My.AssemblyFileBaseName">
            <summary>
            Returns a String containing the name of the file in which the
            Assembly to which the object named in the class constructor
            belongs is stored. The extension, if any, is omitted. To get the
            name, including the extension, query the AssemblyFileName property.
            
            Read only.
            </summary>
        </member>
        <member name="P:WizardWrx.My.Comments">
            <summary>
            Returns a string containing the Comments from the AssemblyInfo
            document, which becomes the Version string resources in the program
            file.
            
            Read only.
            </summary>
        </member>
        <member name="P:WizardWrx.My.CompanyName">
            <summary>
            Returns a string containing the CompanyName from the AssemblyInfo
            document, which becomes the Version string resources in the program
            file.
            
            Read only.
            </summary>
        </member>
        <member name="P:WizardWrx.My.Culture">
            <summary>
            Returns a string containing the assembly culture, parsed from the
            FullName property of the Assembly to which the object named in the
            class constructor belongs.
            
            See FullNamePart.Culture for additional details.
            
            Read only.
            </summary>
        </member>
        <member name="P:WizardWrx.My.Description">
            <summary>
            Returns a string containing the Description from the AssemblyInfo
            document, which becomes the Version string resources in the program
            file.
            
            Read only.
            </summary>
        </member>
        <member name="P:WizardWrx.My.MiscVersionInfo">
            <summary>
            Return the whole FileVersionInfo object, so that anybody who needs
            one of its less frequently used properties can easily get it.
            
            Read only.
            </summary>
        </member>
        <member name="P:WizardWrx.My.ObjectAssembly">
            <summary>
            Return a reference to the Assembly to which the object named in the
            class constructor belongs.
            
            Read only.
            </summary>
        </member>
        <member name="P:WizardWrx.My.PublicKeyToken">
            <summary>
            Returns a string containing the assembly culture, parsed from the
            FullName property of the Assembly to which the object named in the
            class constructor belongs.
            
            Read only.
            </summary>
            <remarks>
            Although this accessor behaves more like a method, I implemented it
            as a read only property to simplify access.
            
            Use of the FullNamePart.PublicKeyToken property is deprecated.
            </remarks>
        </member>
        <member name="P:WizardWrx.My.LegalCopyright">
            <summary>
            Returns a string containing the LegalTrademark from the AssemblyInfo
            document, which becomes the Version string resources in the program
            file.
            
            Read only.
            </summary>
        </member>
        <member name="P:WizardWrx.My.LegalTrademarks">
            <summary>
            Returns a string containing the LegalTrademarks from the
            AssemblyInfo document, which becomes the Version string resources in
            the program file.
            
            Read only.
            </summary>
        </member>
        <member name="P:WizardWrx.My.VersionString">
            <summary>
            Returns a string containing the assembly version, parsed from the
            FullName property of the Assembly to which the object named in the
            class constructor belongs.
            
            Read only.
            </summary>
        </member>
        <member name="P:WizardWrx.My.MachineLocalTZ">
            <summary>
            Time zone in which local time is represented on this machine.
            </summary>
        </member>
        <member name="P:WizardWrx.My.StartupTime">
            <summary>
            Application startup time, expressed as machine local time.
            
            Read only.
            </summary>
            <remarks>
            This is the second property initialized by all constructors, so that
            its value reflects the point in Universal Time when construction of
            the object commences. It is constructed second because its value is
            derived from that of StartupTimeUTC. This initialization order
            ensures that its value is unambiguous when it falls in or close to a
            Daylight Saving Time transition.
            
            See http://msdn.microsoft.com/en-us/library/ms973825.aspx
            </remarks>
        </member>
        <member name="P:WizardWrx.My.StartupTimeDisp">
            <summary>
            This property returns a string containing two lines of text.
            
            The first line contains the UTC startup time, formatted for compact
            display, displayed to the nearest second.
            </summary>
        </member>
        <member name="P:WizardWrx.My.StartupTimeDispMS">
            <summary>
            This property returns a string containing two lines of text.
            
            The first line contains the UTC startup time, formatted for compact
            display, displayed to the nearest millisecond.
            </summary>
        </member>
        <member name="P:WizardWrx.My.StartupTimeLocal">
            <summary>
            Application startup time, expressed as machine local time.
            
            Read only.
            </summary>
            <remarks>
            This property is a lexical disambiguation of StartupTime,
            
            StartupTime is the original property. To preserve backward
            compatibility, both will be retained indefinitely.
            </remarks>
        </member>
        <member name="P:WizardWrx.My.StartupWeekdayNameUtc">
            <summary>
            This property returns a string representation of the day of the week
            when the instance was created, based on the UTC startup time.
            </summary>
        </member>
        <member name="P:WizardWrx.My.StartupWeekdayNameLocal">
            <summary>
            This property returns a string representation of the day of the week
            when the instance was created, based on the local startup time.
            </summary>
        </member>
        <member name="P:WizardWrx.My.StartupTimeUTC">
            <summary>
            Application startup time, expressed as Coordinated Universal Time.
            
            Read only.
            </summary>
            <remarks>
            This is the first property initialized by all constructors, so that
            its value reflects the point in Universal Time when construction of
            the object commences.
            
            This is a new property, which I created to resolve a potential 
            reporting and elapsed time calculation ambiguity which came to my
            attention when I read "Coding Best Practices Using DateTime in the
            .NET Framework," by Dan Rogers, of Microsoft Corporation.
            
            See http://msdn.microsoft.com/en-us/library/ms973825.aspx
            </remarks>
        </member>
        <member name="P:WizardWrx.My.UpTime">
            <summary>
            Return the program uptime.
            
            Read only.
            </summary>
            <remarks>
            Though it is defined as a read only property, its behavior more
            closely resembles that of an argumentless method.
            
            Since the uptime is calculated anew each time this property is read,
            its value is nondeterministic. For most of its likely applications,
            this is ireelevant, but it must be documented, because it makes the
            property unsuitable for certain uses.
            
            The uptime is calculated by calling the static ElapsedTimeCalc on
            the WizardWrx.DateMath.ElapsedTime class, passing in the private
            class variable (of this class) that stores the startup time of this
            application, which is approximated by the time shown on the system
            clock when this object was instantiated.
            </remarks>
        </member>
        <member name="P:WizardWrx.My.UpTimeDispDflt">
            <summary>
            Return a string representation of the program uptime, in the default
            format returned by the simplest form of the ElapsedTimeDisp method
            on the WizardWrx.DateMath.ElapsedTime class.
            </summary>
            <seealso cref="P:WizardWrx.My.UpTime"/>
        </member>
        <member name="P:WizardWrx.My.UpTimeDispHms">
            <summary>
            Return a string representation of the program uptime, in the
            HMS_FORMAT format returned by the simplest form of the 
            ElapsedTimeDisp method on the WizardWrx.DateMath.ElapsedTime class
            that takes a format string.
            </summary>
            <seealso cref="P:WizardWrx.My.UpTime"/>
        </member>
        <member name="P:WizardWrx.My.UpTimeDispMS">
            <summary>
            Return a string representation of the program uptime, in the
            MS_FORMAT format returned by the simplest form of the 
            ElapsedTimeDisp method on the WizardWrx.DateMath.ElapsedTime class
            that takes a format string.
            </summary>
            <seealso cref="P:WizardWrx.My.UpTime"/>
        </member>
        <member name="P:WizardWrx.My.UpTimeDispHmst">
            <summary>
            Return a string representation of the program uptime, in the
            TIME_SPAN_FORMAT_HOURS_PRECISE format returned by the simplest form of the 
            ElapsedTimeDisp method on the WizardWrx.DateMath.ElapsedTime class
            that takes a format string.
            </summary>
            <seealso cref="P:WizardWrx.My.UpTime"/>
        </member>
        <member name="P:WizardWrx.My.UpTimeDispDHms">
            <summary>
            Return a string representation of the program uptime, in the
            TIME_SPAN_FORMAT_DAYS format returned by the simplest form of the 
            ElapsedTimeDisp method on the WizardWrx.DateMath.ElapsedTime class
            that takes a format string.
            </summary>
            <seealso cref="P:WizardWrx.My.UpTime"/>
        </member>
        <member name="P:WizardWrx.My.UpTimeDispDHmst">
            <summary>
            Return a string representation of the program uptime, in the
            TIME_SPAN_FORMAT_DAYS_PRECISE format returned by the simplest form
            of the ElapsedTimeDisp method on the WizardWrx.DateMath.ElapsedTime
            class that takes a format string.
            </summary>
            <seealso cref="P:WizardWrx.My.UpTime"/>
        </member>
        <member name="T:WizardWrx.My.HowManyFullNameParts">
            <summary>
            Argument penmHowManyFullNameParts of methods NameVersionString and
            AssemblyVersionString is of this type.
            </summary>
        </member>
        <member name="F:WizardWrx.My.HowManyFullNameParts.NameOnly">
            <summary>
            Return only the base name, which is usually the same as the
            base name of the file that contains the assembly.
            </summary>
        </member>
        <member name="F:WizardWrx.My.HowManyFullNameParts.NameAndVersion">
            <summary>
            Return the name and version parts of the assembly's FullName
            property.
            </summary>
        </member>
        <member name="T:WizardWrx.My.FullNamePart">
            <summary>
            Enumeration of parts (substrings) of the FullName property of an
            Assembly.
            </summary>
        </member>
        <member name="F:WizardWrx.My.FullNamePart.SimpleName">
            <summary>
            The simple (base) name, which is usually the same as the base
            name of the file in which the assembly is stored.
            </summary>
        </member>
        <member name="F:WizardWrx.My.FullNamePart.VersionString">
            <summary>
            The version string, such as 2.0.0.1. This corresponds to the
            AssemblyVersion, and, usually, the AssemblyFileVersion,
            properties.
            </summary>
        </member>
        <member name="F:WizardWrx.My.FullNamePart.Culture">
            <summary>
            The string that defines the culture, which corresponds to the
            AssemblyCulture property of the assembly. If this string is
            empty, the returned value is neutral.
            </summary>
        </member>
        <member name="F:WizardWrx.My.FullNamePart.PublicKeyToken">
            <summary>
            The Public Key Token property, which is null, and returns a
            string value of null, unless the assembly has a strong name. If
            the assembly has a strong name, this string returns the public
            key token of the key with which the assembly was signed.
            </summary>
            <remarks>
            Use of this enumerated value is DEORECATED.
            
            Use the PublicKeyToken property, which always returns a correct
            value, which is null, unless the assembly has a strong name.
            </remarks>
        </member>
        <member name="T:WizardWrx.Logging.TextLog">
            <summary>
            This class provides text logging services to applications. Though mainly
            intended for debugging, and conceived to serve that need, the class may
            be used for any kind of logging.
            </summary>
        </member>
        <member name="M:WizardWrx.Logging.TextLog.#ctor">
            <summary>
            The default constructor creates an object and expects the Read/Write
            LogFileName property to be set before the first call is made to the
            WriteMessage method.
            
            Use this constructor if you want to defer naming the log file.
            </summary>
        </member>
        <member name="M:WizardWrx.Logging.TextLog.#ctor(System.String)">
            <summary>
            This overloaded constructor creates an object that is ready to use.
            </summary>
            <param name="pstrLogFileName">
            This string is expected to contain a valid file name.
            </param>
            <remarks>
            This class makes no effort to evaluate the file name. This task is
            left to the StreamWriter constructor, which is not called until the
            WriteMessage method is called.
            
            Once the file name is set, it cannot be changed.
            
            Since the name of the mutex is a function of the name of the log
            file, which is its only dependent variable, go ahead and meke sure
            that it comes into being, but don't take ownership just yet.
            </remarks>
        </member>
        <member name="M:WizardWrx.Logging.TextLog.WriteMessage(System.String)">
            <summary>
            Create an Information log message from the input string, and append
            it to the log file.
            </summary>
            <param name="pstrMsg">
            String of text to use as the message. Embedded line feeds are legal,
            and are written into the log file. However, no attempt is made to
            align succeeding lines of text with the first line.
            </param>
        </member>
        <member name="M:WizardWrx.Logging.TextLog.WriteMessage(System.String,WizardWrx.Logging.TextLog.MessageTypes)">
            <summary>
            Create a log message from the input string, and append it to the log
            file.
            </summary>
            <param name="pstrMsg">
            String of text to use as the message. Embedded line feeds are legal,
            and are written into the log file. However, no attempt is made to
            align succeeding lines of text with the first line.
            </param>
            <param name="penmMsgType">
            A member of the MessageTypes enumeration, which classifies the
            message. The classification becomes part of the message. Messages of
            each type are counted separately. These counts can be retrieved at
            any time from like named integer properties.
            
            If the MessageTypes is invalid, the default type, Information, is
            used.
            </param>
        </member>
        <member name="M:WizardWrx.Logging.TextLog.CreateMsg(System.String,System.String)">
            <summary>
            Once the message type has been validated or set, and converted to a
            string, this private method is called to format and write the log
            message.
            </summary>
            <param name="pstrMsg">
            String of text to use as the message. Embedded line feeds are legal,
            and are written into the log file. However, no attempt is made to
            align succeeding lines of text with the first line.
            </param>
            <param name="pstrMsgType">
            String translation of penmMsgType value, either passed into the
            overloaded version of the WriteMessage method, or set to its default
            by the first version of the WriteMessage method. See the definition
            of WriteMessage (2) for additional details.
            </param>
        </member>
        <member name="M:WizardWrx.Logging.TextLog.GetGlobalMutex">
            <summary>
            Use the generated mutex name stored in private string _strMutexName
            to ensure that a like named global mutex exists, and is ready to
            protect access to the log file, thus ensureing that the CreateMsg
            method is both thread-safe and process-safe.
            </summary>
        </member>
        <member name="M:WizardWrx.Logging.TextLog.SetMutexName">
            <summary>
            Instances of this class use a system mutex to synchronize access to
            the log file across processes. Since system mutexes must be named,
            this method is called once by each instance to generate a name that
            makes the mutex usable by any other instance that uses the same log
            file.
            </summary>
            <remarks>
            Since a malicious process could create a denial of service by
            acquiring the mutex, the algorithm used to generate it must be a
            secret known only to other class instances. However, the algorithm
            must generate a name that another class which uses the same log file
            must be able to duplicate.
            
            Following is my chosen algorithm.
            
            1)  Verify that the LogFileName property has been set, by testing it
                for NULL or EMPTY.
                
            2)  Verify that this method has not already been called by verifying
                that _strMutexName IS null.
                
            3)  Get a reference to the assembly that contains this code by
                calling the static GetExecutingAssembly method on the
                System.Reflection.Assembly class.
                
            4)  Construct a string comprised of the following elements.
            
                a)  The name of this class, which is known only to other
                    instances of the same class.
                
                b)  The fully qualified name of the file, which is known only to
                    other instances which are using the same file. These can be
                    in other threads of the same process, or other processes.
                    
                c)  The assembly GUID, which is publicly accessible only via the
                    System.Reflection.Assembly class, unless this assembly is
                    exposed to COM, which it is not, or the author (that would
                    be me) is foolish enough to publish it, which he is not.
                    Even if it were exposed to COM, ascertaining its GUID from
                    the outside world is a significant undertaking.
                    
                The string is constructed by calling the static string.Format
                method with a format string which is defined as a constant known
                only to this method, which has private scope.
                
            5)  The final step makes the whole thing opaque, and of a fixed
                length, by feeding it to the SHA-256 message digest algorithm.
            </remarks>
        </member>
        <member name="M:WizardWrx.Logging.TextLog.GetThisAssemblyGuid(System.Reflection.Assembly)">
            <summary>
            Use the GetCustomAttributes method of the executing assembly to get
            its GUID.
            </summary>
            <param name="pasmThisLib">
            This assembly reference must contain a reference to the reflection
            data for the executing assembly.
            </param>
            <returns>
            The return value is the assembly GUID, as a GuidAttribute, unless
            this assembly has no GUID (It has one, because the IDE generated one
            and saved it into its AssemblyInfo.cs member, where I left it.
            </returns>
        </member>
        <member name="P:WizardWrx.Logging.TextLog.LogFileName">
            <summary>
            Gets or sets the fully qualified name to assign to the log file.
            Once set, by either the constructor, or by a call to the Set method
            of this property, the log file name cannot be changed.
            </summary>
            <remarks>
            Since the name of the mutex is a function of the name of the log
            file, which is its only dependent variable, go ahead and meke sure
            that it comes into being, but don't take ownership just yet.
            </remarks>
        </member>
        <member name="P:WizardWrx.Logging.TextLog.Information">
            <summary>
            Count of Information messages written by this instance.
            </summary>
        </member>
        <member name="P:WizardWrx.Logging.TextLog.Warning">
            <summary>
            Count of Warning  messages written by this instance.
            </summary>
        </member>
        <member name="P:WizardWrx.Logging.TextLog.Serious">
            <summary>
            Count of Serious messages written by this instance.
            </summary>
        </member>
        <member name="P:WizardWrx.Logging.TextLog.Critical">
            <summary>
            Count of Critical messages written by this instance.
            </summary>
        </member>
        <member name="T:WizardWrx.Logging.TextLog.MessageTypes">
            <summary>
            Define message types, which appear between the message date and text
            in each log record. In production applications, these can be used to
            filter the messages, using SQL queries, LogParser, Perl, or other
            text parsers.
            </summary>
        </member>
        <member name="F:WizardWrx.Logging.TextLog.MessageTypes.Information">
            <summary>
            The message is purely informational.
            </summary>
        </member>
        <member name="F:WizardWrx.Logging.TextLog.MessageTypes.Warning">
            <summary>
            The message is a warning. This is more important than an
            Information message, but probably not serious.
            </summary>
        </member>
        <member name="F:WizardWrx.Logging.TextLog.MessageTypes.Serious">
            <summary>
            Messages that carry this flag should be investigated soon.
            </summary>
        </member>
        <member name="F:WizardWrx.Logging.TextLog.MessageTypes.Critical">
            <summary>
            Messages that carry this flag must be investigated immediately.
            </summary>
        </member>
        <member name="T:WizardWrx.LockWithLabel">
            <summary>
            Use instances of this class to provide classes that must be thread-safe
            with locks over which the class has complete control.
            </summary>
            <remarks>
            Use labeled instances when you expect to have multiple locks active,
            especially during the lifetime of a single method, or across calls to
            two or more related methods.
            </remarks>
        </member>
        <member name="F:WizardWrx.LockWithLabel._strLabel">
            <summary>
            This string provides internal storage for the optional object label.
            </summary>
        </member>
        <member name="M:WizardWrx.LockWithLabel.#ctor">
            <summary>
            Create an unlabeled instance.
            </summary>
        </member>
        <member name="M:WizardWrx.LockWithLabel.#ctor(System.String)">
            <summary>
            Create a labeled lockable object.
            </summary>
            <param name="pstrLabel">
            Label to assign to the instance.
            </param>
        </member>
        <member name="P:WizardWrx.LockWithLabel.Label">
            <summary>
            Return the label assigned to this instance. Labels are read only.
            You must use the overloaded constructor to create a labeled
            instance.
            </summary>
        </member>
        <member name="T:WizardWrx.FileInfoExtension">
            <summary>
            Extend the System.IO.FileInfo class with methods for testing, setting,
            and clearing file attribute flags, including the ability to save and
            restore flags to their initial states.
            </summary>
        </member>
        <member name="M:WizardWrx.FileInfoExtension.#ctor(System.String)">
            <summary>
            We insist on a file name.
            </summary>
            <param name="pstrFileName">
            String containing the name of a file to process. This string must
            point to an existing file.
            </param>
            <remarks>
            Because of its intended use, this class is designed without a public
            default constructor. I believe that it is extrenely unlikely that a
            user would need to serialize an instance of this class.
            </remarks>
        </member>
        <member name="M:WizardWrx.FileInfoExtension.ArchiveClear">
            <summary>
            Clear the Archive flag.
            </summary>
            <returns>
            Previous state of the Archive flag.
            </returns>
            <remarks>
            Since the initial state of the flag is preserved internally by the
            class, and can be read from the WasArchive property, callers may
            safely ignore or discard the return value.
            </remarks>
        </member>
        <member name="M:WizardWrx.FileInfoExtension.ArchiveReinstate">
            <summary>
            Restore the initial state of the Archive flag.
            </summary>
            <returns>
            Previous state of the Archive flag.
            </returns>
            <remarks>
            Since the return value is strictly informational, callers may safely
            ignore or discard it.
            </remarks>
        </member>
        <member name="M:WizardWrx.FileInfoExtension.ArchiveSet">
            <summary>
            Set the Archive flag.
            </summary>
            <returns>
            Previous state of the Archive flag.
            </returns>
            <remarks>
            Since the initial state of the flag is preserved internally by the
            class, and can be read from the WasArchive property, callers may
            safely ignore or discard the return value.
            </remarks>
        </member>
        <member name="M:WizardWrx.FileInfoExtension.HiddenClear">
            <summary>
            Clear the Hidden flag.
            </summary>
            <returns>
            Previous state of the Hidden flag.
            </returns>
            <remarks>
            Since the initial state of the flag is preserved internally by the
            class, and can be read from the WasHidden property, callers may
            safely ignore or discard the return value.
            </remarks>
        </member>
        <member name="M:WizardWrx.FileInfoExtension.HiddenReinstate">
            <summary>
            Restore the initial state of the Hidden flag.
            </summary>
            <returns>
            Previous state of the Hidden flag.
            </returns>
            <remarks>
            Since the return value is strictly informational, callers may safely
            ignore or discard it.
            </remarks>
        </member>
        <member name="M:WizardWrx.FileInfoExtension.HiddenSet">
            <summary>
            Set the Hidden flag.
            </summary>
            <returns>
            Previous state of the Hidden flag.
            </returns>
            <remarks>
            Since the initial state of the flag is preserved internally by the
            class, and can be read from the WasHidden property, callers may
            safely ignore or discard the return value.
            </remarks>
        </member>
        <member name="M:WizardWrx.FileInfoExtension.ReadOnlyClear">
            <summary>
            Clear the Read ONly flag.
            </summary>
            <returns>
            Previous state of the Read ONly flag.
            </returns>
            <remarks>
            Since the initial state of the flag is preserved internally by the
            class, and can be read from the WasReadOnly property, callers may
            safely ignore or discard the return value.
            </remarks>
        </member>
        <member name="M:WizardWrx.FileInfoExtension.ReadOnlyReinstate">
            <summary>
            Restore the initial state of the Read Only flag.
            </summary>
            <returns>
            Previous state of the Read ONly flag.
            </returns>
            <remarks>
            Since the return value is strictly informational, callers may safely
            ignore or discard it.
            </remarks>
        </member>
        <member name="M:WizardWrx.FileInfoExtension.ReadOnlySet">
            <summary>
            Set the Read Only flag.
            </summary>
            <returns>
            Previous state of the Read ONly flag.
            </returns>
            <remarks>
            Since the initial state of the flag is preserved internally by the
            class, and can be read from the WasReadOnly property, callers may
            safely ignore or discard the return value.
            </remarks>
        </member>
        <member name="M:WizardWrx.FileInfoExtension.SystemClear">
            <summary>
            Clear the System flag.
            </summary>
            <returns>
            Previous state of the System flag.
            </returns>
            <remarks>
            Since the initial state of the flag is preserved internally by the
            class, and can be read from the WasSystem property, callers may
            safely ignore or discard the return value.
            </remarks>
        </member>
        <member name="M:WizardWrx.FileInfoExtension.SystemReinstate">
            <summary>
            Restore the initial state of the System flag.
            </summary>
            <returns>
            Previous state of the System flag.
            </returns>
            <remarks>
            Since the return value is strictly informational, callers may safely
            ignore or discard it.
            </remarks>
        </member>
        <member name="M:WizardWrx.FileInfoExtension.SystemSet">
            <summary>
            Set the System flag.
            </summary>
            <returns>
            Previous state of the System flag.
            </returns>
            <remarks>
            Since the initial state of the flag is preserved internally by the
            class, and can be read from the WasSystem property, callers may
            safely ignore or discard the return value.
            </remarks>
        </member>
        <member name="P:WizardWrx.FileInfoExtension.TheFile">
            <summary>
            Return the underlying FileInfo object, which is initialized by the
            constructor.
            </summary>
        </member>
        <member name="P:WizardWrx.FileInfoExtension.Archive">
            <summary>
            This property returns the current state of the Archive attribute.
            </summary>
        </member>
        <member name="P:WizardWrx.FileInfoExtension.Compressed">
            <summary>
            This property returns the current state of the Compressed attribute.
            </summary>
        </member>
        <member name="P:WizardWrx.FileInfoExtension.Encrypted">
            <summary>
            This property returns the current state of the Encrypted attribute.
            </summary>
        </member>
        <member name="P:WizardWrx.FileInfoExtension.Hidden">
            <summary>
            This property returns the current state of the Hidden attribute.
            </summary>
        </member>
        <member name="P:WizardWrx.FileInfoExtension.NotContentIndexed">
            <summary>
            This property returns the current state of the NotContentIndexed attribute.
            </summary>
        </member>
        <member name="P:WizardWrx.FileInfoExtension.Offline">
            <summary>
            This property returns the current state of the Offline attribute.
            </summary>
        </member>
        <member name="P:WizardWrx.FileInfoExtension.ReadOnly">
            <summary>
            This property returns the current state of the ReadOnly attribute.
            </summary>
        </member>
        <member name="P:WizardWrx.FileInfoExtension.System">
            <summary>
            This property returns the current state of the System attribute.
            </summary>
        </member>
        <member name="P:WizardWrx.FileInfoExtension.Temporary">
            <summary>
            This property returns the current state of the Temporary attribute.
            </summary>
        </member>
        <member name="P:WizardWrx.FileInfoExtension.WasArchive">
            <summary>
            Return the initial state of the Archive flag.
            </summary>
            <remarks>
            The value of this property is meaningless after the
            ArchiveReinstate method is called, and before either ArchiveClear
            or ArchiveSet has been called on an instance.
            </remarks>
        </member>
        <member name="P:WizardWrx.FileInfoExtension.WasReadOnly">
            <summary>
            Return the initial state of the ReadOnly flag.
            </summary>
            <remarks>
            The value of this property is meaningless after the
            ReadOnlyReinstate method is called, and before either ReadOnlyClear
            or ReadOnlySet has been called on an instance.
            </remarks>
        </member>
        <member name="P:WizardWrx.FileInfoExtension.WasHidden">
            <summary>
            Return the initial state of the Hidden flag.
            </summary>
            <remarks>
            The value of this property is meaningless after the
            HiddenReinstate method is called, and before either HiddenClear
            or HiddenSet has been called on an instance.
            </remarks>
        </member>
        <member name="P:WizardWrx.FileInfoExtension.WasSystem">
            <summary>
            Return the initial state of the System flag.
            </summary>
            <remarks>
            The value of this property is meaningless after the
            SystemReinstate method is called, and before either SystemClear
            or SystemSet has been called on an instance.
            </remarks>
        </member>
        <member name="T:WizardWrx.FileInfoExtension.enmInitialStatus">
            <summary>
            Define the three possible initial states.
            </summary>
        </member>
        <member name="F:WizardWrx.FileInfoExtension.enmInitialStatus.Unknown">
            <value >
            This is the initial state, before the flag is tested.
            </value>
        </member>
        <member name="F:WizardWrx.FileInfoExtension.enmInitialStatus.WasCleared">
            <value>
            The flag was initially in the Cleared state.
            </value>
        </member>
        <member name="F:WizardWrx.FileInfoExtension.enmInitialStatus.WasSet">
            <value>
            The flag was initially in the Set state.
            </value>
        </member>
        <member name="T:WizardWrx.NumericFormats">
            <summary>
            This class defines standard numeric format strings, for use with the
            string.format method and its derivatives and relatives.
            </summary>
        </member>
        <member name="F:WizardWrx.NumericFormats.CURRENCY">
            <summary>
            Currency, which obeys the Regional Settings for currency, including
            the currency symbol and number of decimal places to show.
            </summary>
        </member>
        <member name="F:WizardWrx.NumericFormats.DECIMAL">
            <summary>
            Decimal, which the documentation says is supported only for integral
            types. They mean business; if you try to use this type with a
            decimal or floating point number, you get an exception.
            </summary>
        </member>
        <member name="F:WizardWrx.NumericFormats.FIXED">
            <summary>
            This is the minimal fixed point format string. Modifiers can be
            appended to it to specify significant digits after the decimal
            point.
            </summary>
        </member>
        <member name="F:WizardWrx.NumericFormats.FIXED_2">
            <summary>
            This gives fixed point, with 2 places to the right of the decimal
            point, but without thousands separators.
            </summary>
        </member>
        <member name="F:WizardWrx.NumericFormats.FIXED_3">
            <summary>
            This gives fixed point, with 3 places to the right of the decimal
            point, but without thousands separators.
            </summary>
        </member>
        <member name="F:WizardWrx.NumericFormats.GENERAL">
            <summary>
            This is the default, and it's pretty minimal. The documentation
            states that the number is converted to the most compact format.
            </summary>
        </member>
        <member name="F:WizardWrx.NumericFormats.HEXADECIMAL">
            <summary>
            Hexadecimal, which the documentation says is supported only for
            integral types. They mean business; if you try to use this type with
            a decimal or floating point number, you get an exception.
            
            This format yields a result containing the minimum number of
            hexacecimal numerals required to represent the integer.
            </summary>
        </member>
        <member name="F:WizardWrx.NumericFormats.HEXADECIMAL_2">
            <summary>
            Hexadecimal, which the documentation says is supported only for
            integral types. They mean business; if you try to use this type with
            a decimal or floating point number, you get an exception.
            
            This format yields a result containing a minimum of two hexadecimal
            numerals. If the number needs more than two numerals, the returned
            string contains the minimum number of hexacecimal numerals required
            to represent the integer.
            </summary>
        </member>
        <member name="F:WizardWrx.NumericFormats.HEXADECIMAL_4">
            <summary>
            Hexadecimal, which the documentation says is supported only for
            integral types. They mean business; if you try to use this type with
            a decimal or floating point number, you get an exception.
            
            This format yields a result containing a minimum of four hexadecimal
            numerals. If the number needs more than two numerals, the returned
            string contains the minimum number of hexacecimal numerals required
            to represent the integer.
            </summary>
        </member>
        <member name="F:WizardWrx.NumericFormats.HEXADECIMAL_8">
            <summary>
            Hexadecimal, which the documentation says is supported only for
            integral types. They mean business; if you try to use this type with
            a decimal or floating point number, you get an exception.
            
            This format yields a result containing a minimum of 8 hexadecimal
            numerals. If the number needs more than two numerals, the returned
            string contains the minimum number of hexacecimal numerals required
            to represent the integer.
            
            Use this format to represent result codes returned by Windows DLLs
            and other such functions that return things such as HRESULTs.
            </summary>
        </member>
        <member name="F:WizardWrx.NumericFormats.HEXADECIMAL_PREFIX_0H_LC">
            <summary>
            Not strictly a format string, this string is intended for use as a
            prefix for the string returned from a call to string.format with any
            of the HEXADECIMAL format strings.
            </summary>
        </member>
        <member name="F:WizardWrx.NumericFormats.HEXADECIMAL_PREFIX_0H_UC">
            <summary>
            Not strictly a format string, this string is intended for use as a
            prefix for the string returned from a call to string.format with any
            of the HEXADECIMAL format strings.
            </summary>
        </member>
        <member name="F:WizardWrx.NumericFormats.HEXADECIMAL_PREFIX_0X_LC">
            <summary>
            Not strictly a format string, this string is intended for use as a
            prefix for the string returned from a call to string.format with any
            of the HEXADECIMAL format strings.
            </summary>
        </member>
        <member name="F:WizardWrx.NumericFormats.HEXADECIMAL_PREFIX_0X_UC">
            <summary>
            Not strictly a format string, this string is intended for use as a
            prefix for the string returned from a call to string.format with any
            of the HEXADECIMAL format strings.
            </summary>
        </member>
        <member name="F:WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS">
            <summary>
            Format a number (integer or fixed point), using the Regional
            Settings (Locale) defaults for thousands separator, decimal symbol,
            number of decimal (fraction) places, and number of digits to display
            between each thousands separator.
            </summary>
        </member>
        <member name="F:WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS_0D">
            <summary>
            Format a number (integer or fixed point), using the Regional
            Settings (Locale) defaults for thousands separator, decimal symbol,
            and number of digits to display between each thousands separator.
            
            In contrast to NUMBER_PER_REG_SETTINGS, this string overrides the
            default decimal places value, and always displays ZERO digits to the
            right of the decimal point.
            </summary>
        </member>
        <member name="F:WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS_2D">
            <summary>
            Format a number (integer or fixed point), using the Regional
            Settings (Locale) defaults for thousands separator, decimal symbol,
            and number of digits to display between each thousands separator.
            
            In contrast to NUMBER_PER_REG_SETTINGS, this string overrides the
            default decimal places value, and always displays two digits to the
            right of the decimal point.
            </summary>
        </member>
        <member name="F:WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS_3D">
            <summary>
            Format a number (integer or fixed point), using the Regional
            Settings (Locale) defaults for thousands separator, decimal symbol,
            and number of digits to display between each thousands separator.
            
            In contrast to NUMBER_PER_REG_SETTINGS, this string overrides the
            default decimal places value, and always displays three digits to
            the right of the decimal point.
            </summary>
        </member>
        <member name="F:WizardWrx.NumericFormats.PERCENT">
            <summary>
            Display a fixed point number as a percentage, using the default
            number of decimal places, per the Regional Settings (Locale).
            </summary>
        </member>
        <member name="F:WizardWrx.NumericFormats.PERCENT_DIGITS_2">
            <summary>
            Display a fixed point number as a percentage, showing two digits to
            the right of the decimal point.
            </summary>
        </member>
        <member name="F:WizardWrx.NumericFormats.SCIENTIFIC_LC">
            <summary>
            Scientific notation, with a lower case "e" for the exponent.
            </summary>
        </member>
        <member name="F:WizardWrx.NumericFormats.SCIENTIFIC_UC">
            <summary>
            Scientific notation, with an upper case "E" for the exponent.
            </summary>
        </member>
        <member name="F:WizardWrx.NumericFormats.DECIMAL_DIGITS_DEFAULT">
            <summary>
            For some applications, such as the static methods of this class, we
            set our own default number of decimal places, rather than relying on
            the Regional Settings (Locale), which can be changed, at any time,
            by any user, even with restricted permissions.
            </summary>
        </member>
        <member name="F:WizardWrx.NumericFormats.DECIMAL_DIGITS_MIN">
            <summary>
            The static format string generator methods in this class test the
            requested number of decimal points against this lower limit.
            
            If the specified number is less than this value, the methods behave
            as if the default had been specified.
            </summary>
        </member>
        <member name="F:WizardWrx.NumericFormats.DECIMAL_DIGITS_MAX">
            <summary>
            The static format string generator methods in this class test the
            requested number of decimal points against this upper limit.
            
            If the specified number is greater than this value, the methods
            behave as if the default had been specified.
            </summary>
        </member>
        <member name="M:WizardWrx.NumericFormats.FixedPointDecimal">
            <summary>
            Return a string suitable for formatting a fixed point number.
            </summary>
            <returns>
            Format string for formatting a fixed point number with the default
            number of digits to the right of the decimal point.
            </returns>
        </member>
        <member name="M:WizardWrx.NumericFormats.FixedPointDecimal(System.Int32)">
            <summary>
            Return a string suitable for formatting a fixed point number.
            </summary>
            <param name="pintFractionDigits">
            Number of digits to allow to the right of the decimal point.
            </param>
            <returns>
            Format string for formatting a fixed point number with the specified
            number of digits to the right of the decimal point.
            </returns>
        </member>
        <member name="M:WizardWrx.NumericFormats.FixedWidthInteger">
            <summary>
            Return a string suitable for formatting a fixed width integer.
            </summary>
            <returns>
            Format string for formatting a fixed width integer, with the default
            number of digits.
            </returns>
        </member>
        <member name="M:WizardWrx.NumericFormats.FixedWidthInteger(System.Int32)">
            <summary>
            Return a string suitable for formatting a fixed width integer.
            </summary>
            <param name="pintTotalDigits">
            Minimum number of digits to return in the formatted number.
            </param>
            <returns>
            Format string for formatting a fixed width integer, with the specified
            number of digits.
            </returns>
        </member>
        <member name="M:WizardWrx.NumericFormats.GeneralXPrecision(System.Int32)">
            <summary>
            Return a string suitable for formatting any numeric value.
            </summary>
            <param name="pintTotalDigits">
            Maximum number of digits to return in the formatted number.
            </param>
            <returns>
            Format string for formatting any numeric value, with the specified
            number of digits.
            </returns>
            <remarks>
            Since the General format differs significantly in intent and
            behavior, I chose to provide only one version of its format string
            generator, which takes an integer, which specifies the maximum
            number of digits to display. If more digits are required, General
            format reverts to scientific notation.
            </remarks>
        </member>
        <member name="M:WizardWrx.NumericFormats.HexadecimalInteger">
            <summary>
            Return a string suitable for formatting a hexadecimal representation
            of an integer with the default maximum number of numerals.
            </summary>
            <returns>
            Format string for formatting an integer as a hexadecmal number.
            </returns>
        </member>
        <member name="M:WizardWrx.NumericFormats.HexadecimalInteger(System.Int32)">
            <summary>
            Return a string suitable for formatting a hexadecimal representation
            of an integer with the specified minimum number of numerals.
            </summary>
            <param name="pintTotalDigits">
            Maximum number of digits to return in the formatted number.
            </param>
            <returns>
            Format string for formatting an integer as a hexadecmal number
            containing the specified minimum number of numerals.
            </returns>
        </member>
        <member name="M:WizardWrx.NumericFormats.NumberPerRegSettings">
            <summary>
            Return a string suitable for formatting an integer or fixed point
            number, per the Regional Settings, overriding the default number of
            digits to display to the right of the decimal point, if necessary,
            to display two digits to the right of the decimal point.
            </summary>
            <returns>
            Format string suitable for formatting an integer or fixed point
            number.
            </returns>
        </member>
        <member name="M:WizardWrx.NumericFormats.NumberPerRegSettings(System.Int32)">
            <summary>
            Return a string suitable for formatting an integer or fixed point
            number, per the Regional Settings, overriding the default number of
            digits to display to the right of the decimal point, if necessary,
            to display a specified number of digits to the right of the decimal
            point.
            </summary>
            <param name="pintFractionDigits">
            Maximum number of digits to return in the formatted number.
            </param>
            <returns>
            Format string suitable for formatting an integer or fixed point
            number with a specified number of digits to the right of the decimal
            point.
            </returns>
        </member>
        <member name="M:WizardWrx.NumericFormats.PercentToDecimalPlaces">
            <summary>
            Return a string suitable for formatting an integer or fixed point
            number as a percentage, with two places to the right of the decimal
            point.
            </summary>
            <returns>
            Format string suitable for formatting an integer or fixed point
            number as a percentage.
            </returns>
        </member>
        <member name="M:WizardWrx.NumericFormats.PercentToDecimalPlaces(System.Int32)">
            <summary>
            Return a string suitable for formatting an integer or fixed point
            number as a percentage, with two places to the right of the decimal
            point.
            </summary>
            <param name="pintFractionDigits">
            Maximum number of digits to return in the formatted number.
            </param>
            <returns>
            Format string suitable for formatting an integer or fixed point
            number as a percentage, displaying a specified number of digits to
            the right of the decimal point.
            </returns>
        </member>
        <member name="M:WizardWrx.NumericFormats.ScientificXPrecisionLC(System.Int32)">
            <summary>
            Return a string suitable for formatting any numeric value in
            scientific notaiont.
            </summary>
            <param name="pintTotalDigits">
            Maximum number of digits to return in the formatted number.
            </param>
            <returns>
            Format string for formatting any numeric value, with the specified
            number of digits, in scientific notation.
            
            The exponent is lower case.
            </returns>
            <remarks>
            Since the Scientific format differs significantly in intent and
            behavior, I chose to provide only one version of its format string
            generator, which takes an integer, which specifies the maximum
            number of digits to display.
            </remarks>
        </member>
        <member name="M:WizardWrx.NumericFormats.ScientificXPrecisionUC(System.Int32)">
            <summary>
            Return a string suitable for formatting any numeric value in
            scientific notaiont.
            </summary>
            <param name="pintTotalDigits">
            Maximum number of digits to return in the formatted number.
            </param>
            <returns>
            Format string for formatting any numeric value, with the specified
            number of digits, in scientific notation.
            
            The exponent is lower case.
            </returns>
            <remarks>
            Since the Scientific format differs significantly in intent and
            behavior, I chose to provide only one version of its format string
            generator, which takes an integer, which specifies the maximum
            number of digits to display.
            </remarks>
        </member>
        <member name="T:WizardWrx.Cryptography.Digest">
            <summary>
            Static methods for computing message digests, using the most common
            algorithms.
            </summary>
        </member>
        <member name="M:WizardWrx.Cryptography.Digest.Md5Hash(System.String)">
             <summary>
             Given a string of text, return its message digest as a 32 character
             string of hexadecimal digits.
             </summary>
             <param name="pstrInput">
             String containing the message to be digested. See Remarks for
             important information about the internal implementation.
             </param>
             <returns>
             The message digest, consisting of a string of 32 hexadecimal
             characters. This string is identical with the strings returned by
             the reference implementation, published by Dr. Ronald Rivest, who is
             credited with inventing the MD5 digest algrorithm.
             </returns>
            <remarks>
             Since the internal hashing implementations expect byte arrays, the
             input string must be converted. The Encoding.Default.GetBytes method
             is called upon to convert the string into a byte array.
             
             A slightly modified version of the Rivest code, written in ANSI C,
             is the engine in my MD5WIN stand-alone program and my MD5Digest
             Windows Dynamic Link Library.
             
             However, this function uses a MD5CryptoServiceProvider object, which
             provides a managed interface to the Cryptographic Service Provider
             in the host's installation of Microsoft Windows. I chose this over
             the 100% managed implementation for two reasons.
             
             1) The CSP implementation uses native machine code for the
             computation, and should outperform managed code on large plaintexts.
             
             2) By using the native implementation, the CLR is eliminated as a
             potential point of failure due to a wealness in the implementation
             of the algorithm.
            </remarks>
        </member>
        <member name="M:WizardWrx.Cryptography.Digest.SHA1Hash(System.String)">
            <summary>
            Given a string of text, return its message digest as a 40 character
            string of hexadecimal digits.
            </summary>
            <param name="pstrInput">
            String containing the message to be digested.
            </param>
            <returns>
            The message digest, consisting of a string of 40 hexadecimal
            characters.
            </returns>
            <remarks>
            Since the internal hashing implementations expect byte arrays, the
            input string must be converted. The Encoding.Default.GetBytes method
            is called upon to convert the string into a byte array.
            
            See the Remarks section of the internal documentation of companion
            method Md5Hash for additional technical details.
            </remarks>
        </member>
        <member name="M:WizardWrx.Cryptography.Digest.SHA256Hash(System.String)">
            <summary>
            Given a string of text, return its message digest as a 64 character
            string of hexadecimal digits.
            </summary>
            <param name="pstrInput">
            String containing the message to be digested.
            </param>
            <returns>
            The message digest, consisting of a string of 64 hexadecimal
            characters.
            </returns>
            <remarks>
            Since the internal hashing implementations expect byte arrays, the
            input string must be converted. The Encoding.Default.GetBytes method
            is called upon to convert the string into a byte array.
            
            See the Remarks section of the internal documentation of companion
            method Md5Hash for additional technical details.
            </remarks>
        </member>
        <member name="M:WizardWrx.Cryptography.Digest.SHA384Hash(System.String)">
            <summary>
            Given a string of text, return its message digest as a 96 character
            string of hexadecimal digits.
            </summary>
            <param name="pstrInput">
            String containing the message to be digested.
            </param>
            <returns>
            The message digest, consisting of a string of 96 hexadecimal
            characters.
            </returns>
            <remarks>
            Since the internal hashing implementations expect byte arrays, the
            input string must be converted. The Encoding.Default.GetBytes method
            is called upon to convert the string into a byte array.
            
            See the Remarks section of the internal documentation of companion
            method Md5Hash for additional technical details.
            </remarks>
        </member>
        <member name="M:WizardWrx.Cryptography.Digest.SHA512Hash(System.String)">
            <summary>
            Given a string of text, return its message digest as a 128 character
            string of hexadecimal digits.
            </summary>
            <param name="pstrInput">
            String containing the message to be digested.
            </param>
            <returns>
            The message digest, consisting of a string of 128 hexadecimal
            characters.
            </returns>
            <remarks>
            Since the internal hashing implementations expect byte arrays, the
            input string must be converted. The Encoding.Default.GetBytes method
            is called upon to convert the string into a byte array.
            
            See the Remarks section of the internal documentation of companion
            method Md5Hash for additional technical details.
            </remarks>
        </member>
        <member name="T:WizardWrx.MachineApplicationMutex">
            <summary>
            Instances of this class expose an operating system mutex, through the
            private Mutex property which they create and manage. Use its methods to
            manipulate the system mutex as though it were a raw mutex obtained from
            the operating system.
            </summary>
            <remarks>
            The goal of this class is to simplify the process of using one mutex to
            manage sharing of resources among two or more programs, which may be
            either instances of the same program or entirely differe7nt programs that
            share a resource, such as a connection to a Web service, among them.
            
            Since this class is intended to provide secure mutexes, the mutex name,
            itself, is hidden in a private property, because I see no compelling
            reason to make it visible, and ample reasons to hide it from snoops who
            might use the information to create a denial of service attack on your
            application.
            </remarks>
        </member>
        <member name="F:WizardWrx.MachineApplicationMutex.DEFAULT_REGISTRY_KEY_NAME">
            <summary>
            The name of the default Registry key, which MUST belong to the HKLM
            hive, is provided for reference.
            </summary>
        </member>
        <member name="F:WizardWrx.MachineApplicationMutex.DEFAULT_REGISTRY_KEY_NAME_STRING">
            <summary>
            The name of the default Registry key, as it appears in the exported
            Registration data base merge file (.REG file).
            </summary>
        </member>
        <member name="M:WizardWrx.MachineApplicationMutex.#ctor">
            <summary>
            The default constructor uses the default NamingMethod to construct a
            name that can be derived by any other caller on the same machine.
            </summary>
        </member>
        <member name="M:WizardWrx.MachineApplicationMutex.#ctor(WizardWrx.MachineApplicationMutex.NamingMethod,System.String)">
            <summary>
            This constructor supports any NamingMethod that requires a 
            user-supplied Registry key.
            </summary>
            <param name="penmNamingMethod">
            Any member of the NamingMethod enumeration that expects the user to
            supply the name of a Registry key.
            </param>
            <param name="pstrRegistrySubkeyName">
            The name of a Registry key, which must be a subkey of Registry hive
            HKEY_LOCAL_MACHINE, whose default value (a REG_SZ type) is used to
            derive the name of the mutex.
            </param>
            <remarks>
            Any name that begins with a backslash is treated as relative to
            Registry subkey [HKLM\SOFTWARE\WizardWrx\MachineApplicationMutex],
            which is defined in convenience constant, DEFAULT_REGISTRY_KEY_NAME.
            </remarks>
        </member>
        <member name="M:WizardWrx.MachineApplicationMutex.#ctor(WizardWrx.MachineApplicationMutex.NamingMethod,System.String,System.String)">
            <summary>
            This constructor supports any NamingMethod that requires a 
            user-supplied Registry key.
            </summary>
            <param name="penmNamingMethod">
            Any member of the NamingMethod enumeration that expects the user to
            supply the name of a Registry key.
            </param>
            <param name="pstrRegistrySubkeyName">
            The name of a Registry key, which must be a subkey of Registry hive
            HKEY_LOCAL_MACHINE, whose default value (a REG_SZ type) is used to
            derive the name of the mutex.
            </param>
            <remarks>
            Any name that begins with a backslash is treated as relative to
            Registry subkey [HKLM\SOFTWARE\WizardWrx\MachineApplicationMutex],
            which is defined in convenience constant, DEFAULT_REGISTRY_KEY_NAME.
            </remarks>
            <param name="pstrMutexRegValueName">
            The name of a REG_SZ value of Registry key pstrRegistrySubkeyName.
            </param>
        </member>
        <member name="M:WizardWrx.MachineApplicationMutex.#ctor(WizardWrx.MachineApplicationMutex.NamingMethod,System.Guid)">
            <summary>
            This constructor supports any NamingMethod that requires a 
            user-supplied GUID.
            </summary>
            <param name="penmNamingMethod">
            Any member of the NamingMethod enumeration that expects the user to
            supply a GUID string.
            </param>
            <param name="pguidApplicationGUID">
            The internal form of a GUID, which is converted to a Registry format
            string for use in constructing the name of the mutex.
            </param>
        </member>
        <member name="M:WizardWrx.MachineApplicationMutex.#ctor(WizardWrx.MachineApplicationMutex.NamingMethod,System.String,System.Guid)">
            <summary>
            This constructor supports any NamingMethod that requires a 
            user-supplied Registry key AND a user-supplied GUID.
            </summary>
            <param name="penmNamingMethod">
            Any member of the NamingMethod enumeration that expects the user to
            supply the name of a Registry key and a GUID.
            </param>
            <param name="pstrRegistrySubkeyName">
            The name of a Registry key, which must be a subkey of Registry hive
            HKEY_LOCAL_MACHINE, whose default value (a REG_SZ type) is used to
            derive the name of the mutex. Please see Remarks for important
            information.
            </param>
            <param name="pguidApplicationGUID">
            The internal form of a GUID, which is converted to a Registry format
            string for use in constructing the name of the mutex.
            </param>
            <remarks>
            Any name that begins with a backslash is treated as relative to
            Registry subkey [HKLM\SOFTWARE\WizardWrx\MachineApplicationMutex],
            which is defined in convenience constant, DEFAULT_REGISTRY_KEY_NAME.
            </remarks>
        </member>
        <member name="M:WizardWrx.MachineApplicationMutex.#ctor(WizardWrx.MachineApplicationMutex.NamingMethod,System.String,System.String,System.Guid)">
            <summary>
            This constructor supports any NamingMethod that requires a 
            user-supplied Registry value AND a user-supplied GUID.
            </summary>
            <param name="penmNamingMethod">
            Any member of the NamingMethod enumeration that expects the user to
            supply the name of a Registry key and a GUID.
            </param>
            <param name="pstrRegistrySubkeyName">
            The name of a Registry key, which must be a subkey of Registry hive
            HKEY_LOCAL_MACHINE, whose default value (a REG_SZ type) is used to
            derive the name of the mutex. Please see Remarks for important
            information.
            </param>
            <param name="pstrMutexRegValueName">
            The name of a REG_SZ value of Registry key pstrRegistrySubkeyName.
            </param>
            <param name="pguidApplicationGUID">
            The internal form of a GUID, which is converted to a Registry format
            string for use in constructing the name of the mutex.
            </param>
        </member>
        <member name="M:WizardWrx.MachineApplicationMutex.#ctor(WizardWrx.MachineApplicationMutex.NamingMethod,System.Runtime.InteropServices.GuidAttribute)">
            <summary>
            This constructor supports any NamingMethod that requires a 
            user-supplied Registry key AND a user-supplied GUID.
            </summary>
            <param name="penmNamingMethod">
            Any member of the NamingMethod enumeration that expects the user to
            supply the name of a Registry key and a GUID.
            </param>
            <param name="pguidApplicationGUIDAttribute">
            An alternative internal form of a GUID, which is exported by classes
            in the System.Runtime.InteropServices namespace, and is used by
            other classes, such as System.Reflection.Assembly, to export a form
            of their associated GUID. This class converts it to a Registry
            format string, for use in constructing the name of the mutex.
            </param>
        </member>
        <member name="M:WizardWrx.MachineApplicationMutex.#ctor(WizardWrx.MachineApplicationMutex.NamingMethod,System.String,System.Runtime.InteropServices.GuidAttribute)">
            <summary>
            This constructor supports any NamingMethod that requires a 
            user-supplied Registry key AND a user-supplied GUID.
            </summary>
            <param name="penmNamingMethod">
            Any member of the NamingMethod enumeration that expects the user to
            supply the name of a Registry key and a GUID.
            </param>
            <param name="pstrRegistrySubkeyName">
            The name of a Registry key, which must be a subkey of Registry hive
            HKEY_LOCAL_MACHINE, whose default value (a REG_SZ type) is used to
            derive the name of the mutex. Please see Remarks for important
            information.
            </param>
            <param name="pguidApplicationGUIDAttribute">
            An alternative internal form of a GUID, which is exported by classes
            in the System.Runtime.InteropServices namespace, and is used by
            other classes, such as System.Reflection.Assembly, to export a form
            of their associated GUID. This class converts it to a Registry
            format string, for use in constructing the name of the mutex.
            </param>
            <remarks>
            Any name that begins with a backslash is treated as relative to
            Registry subkey [HKLM\SOFTWARE\WizardWrx\MachineApplicationMutex],
            which is defined in convenience constant, DEFAULT_REGISTRY_KEY_NAME.
            </remarks>
        </member>
        <member name="M:WizardWrx.MachineApplicationMutex.#ctor(WizardWrx.MachineApplicationMutex.NamingMethod,System.String,System.String,System.Runtime.InteropServices.GuidAttribute)">
            <summary>
            This constructor supports any NamingMethod that requires a 
            user-supplied Registry value AND a user-supplied GUID.
            </summary>
            <param name="penmNamingMethod">
            Any member of the NamingMethod enumeration that expects the user to
            supply the name of a Registry key and a GUID.
            </param>
            <param name="pstrRegistrySubkeyName">
            The name of a Registry key, which must be a subkey of Registry hive
            HKEY_LOCAL_MACHINE, whose default value (a REG_SZ type) is used to
            derive the name of the mutex. Please see Remarks for important
            information.
            </param>
            <param name="pstrMutexRegValueName">
            The name of a REG_SZ value of Registry key pstrRegistrySubkeyName.
            </param>
            <param name="pguidApplicationGUIDAttribute">
            An alternative internal form of a GUID, which is exported by classes
            in the System.Runtime.InteropServices namespace, and is used by
            other classes, such as System.Reflection.Assembly, to export a form
            of their associated GUID. This class converts it to a Registry
            format string, for use in constructing the name of the mutex.
            </param>
        </member>
        <member name="M:WizardWrx.MachineApplicationMutex.Acquire">
            <summary>
            Use this method to acquire the mutex, to protect a shared resource
            while you use it. Please see Remarks for important information.
            </summary>
            <returns>
            Since this method waits indefinitely, it either returns TRUE, when
            its WaitHandle is signaled, or it never returns, since the effective
            timeout is infinite.
            </returns>
            <remarks>
            CAUTION!
            
            Use this method with care, since it makes your code very susceptible
            to a deadlock, which can cause a denial of service, and it may cause
            the executing process to hang.
            
            This method is a wafer-thin wrapper around the default form of the
            WaitHandle.WaitOne Method, which waits indefinitely for a signal.
            
            Calling this method is equivalent to passing Timeout.Infinite (-1)
            to the second overload, or an equivalent TimeSpan to the third.
            
            Unlike the underlying Mutex class, subsequent calls on this instance
            are counted, but are otherwise ignored, and a single call to its
            Relinquish method releases the mutex and resets the counter.
            
            This method throws an AbandonedMutexException exception if the last
            call by any thread that has access to this same mutex throws an 
            ApplicationException.
            
            An AbandonedMutexException exception usually indicates a serious
            coding error that must be investigated and corrected.
            
            Calls to Acquire and Relinquish MUST occur in pairs. The most likely
            cause of an AbandonedMutexException is that one of the applications
            that shares this mutex called Acquire without a mathcing call to
            Relinquish. A program that threw an ApplicationException exception 
            that was reported before this one points is the most likely suspect.
            </remarks>
        </member>
        <member name="M:WizardWrx.MachineApplicationMutex.Acquire(System.Int32)">
            <summary>
            Use this method to acquire the mutex, to protect a shared resource
            while you use it. Please see Remarks for important information.
            </summary>
            <param name="pinTimeoutMilliseconds">
            Specify the number of milliseconds to wait, or Timeout.Infinite (-1)
            to wait indefinitely.
            </param>
            <returns>
            This method returns TRUE if its underlying WaitHandle is signaled
            before the timeout, pinTimeoutMilliseconds, expires.
            </returns>
            <remarks>
            This method is a wafer-thin wrapper around the third form of the
            WaitHandle.WaitOne Method, which waits for a signal until a number
            of milliseconds, specified as an integer, has elapsed.
            
            Unlike the underlying Mutex class, subsequent calls on this instance
            are counted, but are otherwise ignored, and a single call to its
            Relinquish method releases the mutex and resets the counter.
            
            This method throws an AbandonedMutexException exception if the last
            call by any thread that has access to this same mutex throws an 
            ApplicationException.
            
            An AbandonedMutexException exception usually indicates a serious
            coding error that must be investigated and corrected.
            
            Calls to Acquire and Relinquish MUST occur in pairs. The most likely
            cause of an AbandonedMutexException is that one of the applications
            that shares this mutex called Acquire without a mathcing call to
            Relinquish. A program that threw an ApplicationException exception 
            that was reported before this one points is the most likely suspect.
            </remarks>
        </member>
        <member name="M:WizardWrx.MachineApplicationMutex.Acquire(System.TimeSpan)">
            <summary>
            Use this method to acquire the mutex, to protect a shared resource
            while you use it. Please see Remarks for important information.
            </summary>
            <param name="ptmsTimeoutTimeSpan">
            Specify a TimeSpan that represents the number of milliseconds to
            wait, or a TimeSpan that represents -1 milliseconds to wait
            indefinitely.
            </param>
            <returns>
            This method returns TRUE if its underlying WaitHandle is signaled
            before the timeout, ptmsTimeoutTimeSpan, expires.
            </returns>
            <remarks>
            This method is a wafer-thin wrapper around the third form of the
            WaitHandle.WaitOne Method, which waits for a signal until a number
            of milliseconds, specified as a TimeSpan, has elapsed.
            
            Unlike the underlying Mutex class, subsequent calls on this instance
            are counted, but are otherwise ignored, and a single call to its
            Relinquish method releases the mutex and resets the counter.
            
            This method throws an AbandonedMutexException exception if the last
            call by any thread that has access to this same mutex throws an 
            ApplicationException.
            
            An AbandonedMutexException exception usually indicates a serious
            coding error that must be investigated and corrected.
            
            Calls to Acquire and Relinquish MUST occur in pairs. The most likely
            cause of an AbandonedMutexException is that one of the applications
            that shares this mutex called Acquire without a mathcing call to
            Relinquish. A program that threw an ApplicationException exception 
            that was reported before this one points is the most likely suspect.
            </remarks>
        </member>
        <member name="M:WizardWrx.MachineApplicationMutex.Relinquish">
            <summary>
            Use this method to release the mutex that was acquired by calling
            the acquire method, when you are finished using the resource that it
            protects. Please see Remarks for important information.
            </summary>
            <remarks>
            This method throws an ApplicationException exception unless the same
            thread owns the mutex. Calls to Acquire and Relinquish MUST occur in
            pairs.
            
            If in doubt, test the IsAcquired property, and call this method only
            if it is TRUE.
            
            Calls to any of the Acquire overloads that succeed set IsAcquired to
            TRUE. Under all other circumstnances, IsAcquired is FALSE.
            </remarks>
        </member>
        <member name="M:WizardWrx.MachineApplicationMutex.Dispose">
            <summary>
            This method is the public face of the IDisposable interface.
            </summary>
        </member>
        <member name="M:WizardWrx.MachineApplicationMutex.MutexAquireOrCreate">
            <summary>
            If another process created our mutex, attempt to gain access to it.
            Otherwise, create our mutex, and share it with related processes.
            </summary>
        </member>
        <member name="M:WizardWrx.MachineApplicationMutex.SecureForAuthenticatedUsers">
            <summary>
            For the present, this implementation grants the creator of a new
            mutex Full Control, while Authenticated Users get Modify,
            Synchronize, and Delete permissions.
            </summary>
        </member>
        <member name="P:WizardWrx.MachineApplicationMutex.HowNamed">
            <summary>
            If the NamingMethod specified to the constructor is valid, the
            constructor saves it for reference. Otherwise, the constructor
            sets it to Default, and behaves accordingly.
            </summary>
        </member>
        <member name="P:WizardWrx.MachineApplicationMutex.IsAcquired">
            <summary>
            Return TRUE if the caller owns the mutex. Otherwise, return FALSE.
            </summary>
            <remarks>
            Any call to Acquire that succeeds sets this flag.
            
            Any call to Relinquish clears it, and it is initialized as cleared.
            </remarks>
        </member>
        <member name="P:WizardWrx.MachineApplicationMutex.MutexIsNew">
            <summary>
            The value of this property indicates how the underlying system mutex
            was created. See the HowCreated enumeration for important details.
            </summary>
            <remarks>
            This property is useful immediately after you create an instance of'
            this class. Thereafter, it is interesting, but not useful, unless
            you are having problems with other processes running in different
            security contexts acquiring the mutex.
            </remarks>
        </member>
        <member name="P:WizardWrx.MachineApplicationMutex.SuccessiveAcquireCalls">
            <summary>
            The value of this property is the number of calls made on the
            Acquire method of the current instance since the last call on its
            Relinquish method, or since its creation, if Acquire has yet to be
            called.
            </summary>
            <remarks>
            If the value of this property is zero, one of two things is true.
            
            1) Acquire has never been called on the instance.
            
            2) Acquire has not been called since the last call to Relinquish.
            
            If the value of this property is greater than zero, it is the number
            of times since instantiation or the last call to Relinquish that the
            Acquire method has been called.
            </remarks>
        </member>
        <member name="P:WizardWrx.MachineApplicationMutex.Scope">
            <summary>
            Use this property to verify that the scope of the mutex meets your
            requirements.
            </summary>
        </member>
        <member name="P:WizardWrx.MachineApplicationMutex.UnderlyingMutex">
            <summary>
            Use this property to acquire a reference to the underlying mutex.
            </summary>
        </member>
        <member name="T:WizardWrx.MachineApplicationMutex.NamingMethod">
            <summary>
            Part of the flexibility and robustness of this class derives from
            the wealth of supported naming methods.
            </summary>
        </member>
        <member name="F:WizardWrx.MachineApplicationMutex.NamingMethod.DefaultScope">
            <summary>
            The default naming method uses a guid, which is stored in the
            default REG_SZ value of Registry key 
            [HKEY_LOCAL_MACHINE\SOFTWARE\WizardWrx\MachineApplicationMutex].
            
            Please see Remarks for additional details.
            </summary>
            <remarks>
            Although simple and secure, the resulting mutex is truly global
            (machine wide) in scope, since ANY application that requests it
            gets the same mutex.
            
            For you object oriented types, think of this as a singleton
            mutex for the machine.
            
            The predefined GUID is {5F4200E7-DB8E-42df-8156-3B5CB148D7AC},
            which may be replacd by any string, such as your own GUID,
            although you are free to select your own string.
            
            The name actually assigned to the mutex is constructed as
            follows.
            
            1) Concatenate the fully qualified key name as shown in RegEdit,
            HKEY_LOCAL_MACHINE\SOFTWARE\WizardWrx\MachineApplicationMutex,
            using the format in which it is displayed in a .REG file,
            followed by two underscores and the contents of the key's
            default REG_SZ value string.
            
            2) Append another underscore, followed by the GUID of the class
            library which exposes this class. This is the GUID returned by
            a reflection-only instance of this class library.
            
            3) Derive the SHA-256 message digest (hash) of the string from
            step 2.
            </remarks>
        </member>
        <member name="F:WizardWrx.MachineApplicationMutex.NamingMethod.MachineScope">
            <summary>
            Machine is an alias for DefaultScope.
            </summary>
        </member>
        <member name="F:WizardWrx.MachineApplicationMutex.NamingMethod.ApplicationScope">
            <summary>
            This method, which is intended to be shared across applications
            composed of two or more modules, or mulitiple instances of one
            module, all running on a single host. As such, it requires you
            to supply a GUID, a Registry key, or both, which is known to all
            modules in the application.
            </summary>
            <remarks>
            If you specify a Registry key, it must meet ONE of the following
            two conditions, in addition to being located in the 
            HKEY_LOCAL_MACHINE hive.
            
            1) If the key name is fully qualified, relative to the root of
            HKEY_LOCAL_MACHINE, it may be anywhere in HKEY_LOCAL_MACHINE.
            
            2) If the key name is relative, it must be a subkey of the
            library key, HKLM\SOFTWARE\WizardWrx\MachineApplicationMutex.
            </remarks>
        </member>
        <member name="F:WizardWrx.MachineApplicationMutex.NamingMethod.Custom">
            <summary>
            Use the supplied input string, AS IS.
            </summary>
            <remarks>
            Depending on how it is derived and where it is stored, this
            method MAY be suitable for protecting resources across an entire
            application domain, and it MAY yield the most secure mutex.
            </remarks>
        </member>
        <member name="T:WizardWrx.MachineApplicationMutex.UsableScope">
            <summary>
            This enumeration supports a Scope property, which the constructors
            use to indicate the appropriate use for the generated mutex.
            </summary>
        </member>
        <member name="F:WizardWrx.MachineApplicationMutex.UsableScope.Machine">
            <summary>
            The name was generated in such a way that its scope is global to
            the entire machine.
            
            The default value is Machine, which is consistent with the names
            generated when NamingMethod is Default.
            </summary>
        </member>
        <member name="F:WizardWrx.MachineApplicationMutex.UsableScope.Application">
            <summary>
            The name was generated in such a way that its cope is global to
            the application on whose behalf it was generated, because it was
            derived from elements known only to the application.
            </summary>
        </member>
        <member name="T:WizardWrx.MachineApplicationMutex.HowCreated">
            <summary>
            The object uses this property to indicate how the mutex was created.
            Its value manifests as the read-only MutexIsNew property.
            </summary>
        </member>
        <member name="F:WizardWrx.MachineApplicationMutex.HowCreated.Unknown">
            <summary>
            The property has yet to be set.
            </summary>
            <remarks>
            This is the initial value of the MutexIsNew propewrty.
            
            It retains this value until the mutex has been named and created
            or opened.
            </remarks>
        </member>
        <member name="F:WizardWrx.MachineApplicationMutex.HowCreated.New">
            <summary>
            The mutex is new. That is, no like named system mutex existed. A
            new named mutex was created, and the calling thread owns it.
            </summary>
            <remarks>
            When a mutex is created, the calling thread must initially own
            it, so that it has an opportunity to adjust its Acess Control
            List.
            
            Since the internal counters are set, a calling thread may safely
            ignore the fact that it already owns the mutex, when it comes
            time to acquire the mutex. Hence, the thread MAY keep the mutex.
            </remarks>
        </member>
        <member name="F:WizardWrx.MachineApplicationMutex.HowCreated.Existing">
            <summary>
            A named system mutex exists. That is, another process created a
            like named system mutex, but the calling thread doesn't own it.
            
            Since a like named mutex was found, but not acquired, the thread
            MUST acquire it to protect a resource.
            </summary>
        </member>
        <member name="T:WizardWrx.ThreadSafeExceptionReporting">
            <summary>
            This static class exposes methods for formatting data from instances of
            the System.Exception class, and commonly used derived classes, and
            displaying the formatted data on a console (strictly speaking, on 
            STDOUT, which can be redirected to a file). 
            
            All methods of this class are thread-safe. See Remarks.
            
            Since this class consists entirely of static methods and associated
            string constants, it is marked Static, which implises sealed.
            
            All methods are thread safe, and instance methods are forbidden.
            </summary>
            <remarks>
            This class was developed to report exceptions in a multithreaded console
            application. Its methods were designed to report messages in a manner
            that is thread-safe, yet keeps each message intact.
            
            Both objectives are achieved fairly easily.
            
            1) All methods use only local variables. The only class level static
            data is a handful of constants, which are, by definition, read only.
            This satisfies the first condition of thread safety, because all data is
            local to each method.
            
            2) Each message is built up, line by line, by appending to an instance 
            of a StringBuilder class, using its AppendFormat method, which behaves
            like the static Format method of the System.String class. Although the
            AppendFormat method is an instance method, since the associated instance
            is local, thread safety remains intact. See Reference 1.
            
            2) A single call to TextWriter.Synchronized ( Console.Out ).WriteLine
            writes the message, all at once, onto the console, preserving its
            integrity. Since the only event that uses a shared resource is called
            once only, and that call is syncrhonized, the message display is intact.
            
            Each method uses the shared resource, access to the console stream, once
            only, and does so in a synchronized (thread-safe) way, the entire method
            is thread-safe.
            </remarks>
        </member>
        <member name="M:WizardWrx.ThreadSafeExceptionReporting.ReportException(System.Exception,System.String)">
            <summary>
            Format and report the properties of a generic Exception on a console
            in a thread-safe manner.
            </summary>
            <param name="perrAny">
            The instance of the base Exception class to process. See Remarks.
            </param>
            <param name="pstrCurrMethodName">
            This should be the name of the method in which the error is caught
            and reported. See Remarks.
            </param>
            <remarks>
            This can be ANY exception type, although the intent is to limit its
            use to reporting exceptions thrown by the base class,
            System.Exception.
            
            Other overloads exist for reporting exceptions thrown by types
            derived from System.Exception.
            
            The TargetSite property, exposed by descendents of System.Exception,
            is the name of the method in which the exception was thrown.
            </remarks>
        </member>
        <member name="M:WizardWrx.ThreadSafeExceptionReporting.ReportException(System.ArgumentException,System.String)">
            <summary>
            Format and report the properties of an ArgumentException exception on
            a console in a thread-safe manner.
            </summary>
            <param name="perrBadArg">
            The instance of the ArgumentException exception to process. See
            Remarks.
            </param>
            <param name="pstrCurrMethodName">
            This should be the name of the method in which the error is caught
            and reported. See Remarks.
            </param>
            <remarks>
            Although this method can process objects of ANY class which derives
            from ArgumentException, other methods of this class specialize in
            processing objects of the commonly used ArgumentOutOfRangeException
            and ArgumentNullException derived classes.
            
            The TargetSite property, exposed by descendents of System.Exception,
            is the name of the method in which the exception was thrown.
            </remarks>
        </member>
        <member name="M:WizardWrx.ThreadSafeExceptionReporting.ReportException(System.ArgumentOutOfRangeException,System.String)">
            <summary>
            Format and report the properties of an ArgumentOutOfRangeException
            exception on a console in a thread-safe manner.
            </summary>
            <param name="perrBadArg">
            The instance of the ArgumentOutOfRangeException class to process.
            </param>
            <param name="pstrCurrMethodName">
            This should be the name of the method in which the error is caught
            and reported. See Remarks.
            </param>
            <remarks>
            The TargetSite property, exposed by descendents of System.Exception,
            is the name of the method in which the exception was thrown.
            </remarks>
        </member>
        <member name="M:WizardWrx.ThreadSafeExceptionReporting.ReportException(System.ArgumentNullException,System.String)">
            <summary>
            Format and report the properties of an ArgumentNullException
            exception on a console in a thread-safe manner. See Remarks.
            </summary>
            <param name="perrNullArg">
            The instance of an ArgumentNullException exception to process.
            </param>
            <param name="pstrCurrMethodName">
            This should be the name of the method in which the error is caught
            and reported. See Remarks.
            </param>
            <remarks>
            The TargetSite property, exposed by descendents of System.Exception,
            is the name of the method in which the exception was thrown.
            </remarks>
        </member>
        <member name="M:WizardWrx.ThreadSafeExceptionReporting.ReportException(System.ObjectDisposedException,System.String)">
            <summary>
            Format and report the properties of an ObjectDisposedException
            exception on a console in a thread-safe manner. See Remarks.
            </summary>
            <param name="perrDisposed">
            The instance of the ObjectDisposedException Exception class to
            process.
            </param>
            <param name="pstrCurrMethodName">
            This should be the name of the method in which the error is caught
            and reported. See Remarks.
            </param>
            <remarks>
            Any process that throws an ObjectDisposedException exception is in
            serious trouble, and deserves to crash, and be investigated, because
            this type of exception is almost invariably caused by a programming
            logic error.
            
            The TargetSite property, exposed by descendents of System.Exception,
            is the name of the method in which the exception was thrown.
            </remarks>
        </member>
        <member name="M:WizardWrx.ThreadSafeExceptionReporting.ReportException(System.IO.IOException,System.String,System.String)">
            <summary>
            Format and report the properties of an IOException exception on a
            console in a thread-safe manner.
            </summary>
            <param name="perrIOError">
            The instance of the IOException class to process. See Remarks.
            </param>
            <param name="pstrCurrMethodName">
            This should be the name of the method in which the error is caught
            and reported. See Remarks.
            </param>
            <param name="pstrFileName">
            This is the name of the file which was being processed. There should
            be a corresponding property on the IOException, I have yet to find
            it.
            </param>
            <remarks>
            This routine processes ANY exception of the IOException class and
            its derivatives. Methods for parsing published derived classes are
            somewhere on my ToDo list.
            
            The TargetSite property, exposed by descendents of System.Exception,
            is the name of the method in which the exception was thrown.
            </remarks>
        </member>
        <member name="M:WizardWrx.ThreadSafeExceptionReporting.ReportException(System.FormatException,System.String,System.String)">
            <summary>
            Format and report the properties of an FormatException exception on
            a console in a thread-safe manner.
            </summary>
            <param name="perrrBadFormat">
            The instance of the FormatException class to process.
            </param>
            <param name="pstrCurrMethodName">
            This should be the name of the method in which the error is caught
            and reported. See Remarks.
            </param>
            <param name="pstrFormatString">
            This should be the format string which caused the exception. There
            should be a way to feed this to the exception, or recover it, but I
            have yet to find it.
            </param>
            <remarks>
            The TargetSite property, exposed by descendents of System.Exception,
            is the name of the method in which the exception was thrown.
            </remarks>
        </member>
        <member name="M:WizardWrx.ThreadSafeExceptionReporting.AddCommonElements(System.Text.StringBuilder,System.Exception,WizardWrx.ThreadSafeExceptionReporting.StackTraceDisposition)">
            <summary>
            Add the Source, TargetSite, and StackTrace properties to the
            exception report. See Remarks.
            </summary>
            <param name="psbMsg">
            Append the report items to this StringBuilder.
            </param>
            <param name="perrAnyKind">
            This is an instance of the System.Exception class, or one of its
            derivatives. See Remarks.
            </param>
            <param name="penmStackTraceDisposition">
            Pass in a member of the StackTraceDisposition enumeration to include
            or omit (suppress) the stack trace from the report.
            </param>
            <remarks>
            This method is called recursively to process inner exceptions.
            
            By default, all exceptions which derive from System.Exception expose
            these three properties, and any of them can be cast to this type.
            
            The TargetSite string contains the name of the method that threw the
            exception.
            
            The Source string contains the name of the class to which the method
            named in the TargetSite string belongs.
            </remarks>
        </member>
        <member name="M:WizardWrx.ThreadSafeExceptionReporting.ReformatExceptionMessage(System.String)">
            <summary>
            This internal method beautifies the format of invalid argument
            exception reports.
            </summary>
            <param name="pstrMsg">
            Argument string to beautify by inserting leading white between
            embedded newlines.
            </param>
            <returns>
            Beautified string, suitable for presentation on a console.
            </returns>
        </member>
        <member name="T:WizardWrx.ThreadSafeExceptionReporting.StackTraceDisposition">
            <summary>
            Use this enumeration to specify whether to include or omit the
            StackTrace from the report. See Remarks.
            </summary>
            <remarks>
            The penmStackTraceDisposition is specified in terms of this
            enumeration.
            </remarks>
        </member>
        <member name="F:WizardWrx.ThreadSafeExceptionReporting.StackTraceDisposition.Include">
            <summary>
            Include the StackTrace.
            </summary>
        </member>
        <member name="F:WizardWrx.ThreadSafeExceptionReporting.StackTraceDisposition.Omit">
            <summary>
            Ompit (suppress) the StackTrace.
            </summary>
        </member>
        <member name="T:WizardWrx.DelimitedList">
            <summary>
            Class for transforming delimited lists into sortable, searchable arrays
            of arbitrary size, by deriving from ArrayList, and using two overloaded
            constructors that call the Split method against their string arguments.
            </summary>
        </member>
        <member name="M:WizardWrx.DelimitedList.#ctor">
            <summary>
            The default constructor creates an empty class, to which individual
            items are added by calling methods on the base class. However, at
            least for now, I have marked this constructor Private.
            </summary>
        </member>
        <member name="M:WizardWrx.DelimitedList.#ctor(System.String,System.Char[])">
            <summary>
            This overloaded constructor takes a string, which is expected to be
            delimited by a character from the array in its second argument.
            </summary>
            <param name="pstrList">
            String containing the delimited list.
            </param>
            <param name="pchrDlm">
            Array of characters, at least one of which is expected to delimit
            the list.
            </param>
            <remarks>
            After all the elements are in the list, the Sort method of the base
            class is called with the default comparer. If you want to use
            another comparer, you can, of course, call the Sort method directly.
            </remarks>
        </member>
        <member name="M:WizardWrx.DelimitedList.#ctor(System.String,System.String[])">
            <summary>
            This overloaded constructor takes a string, which is expected to be
            delimited by a string from the array in its second argument.
            </summary>
            <param name="pstrList">
            String containing the delimited list.
            </param>
            <param name="pstrDlm">
            Array of strings, at least one of which is expected to delimit the
            list.
            </param>
            <remarks>
            The StringSplitOptions argument of the String.Split method, used to
            split the delimited list, defaults to StringSplitOptions.None.
            </remarks>
            <remarks>
            After all the elements are in the list, the Sort method of the base
            class is called with the default comparer. If you want to use
            another comparer, you can, of course, call the Sort method directly.
            </remarks>
        </member>
        <member name="M:WizardWrx.DelimitedList.#ctor(System.String,System.String[],System.StringSplitOptions)">
            <summary>
            This overloaded constructor takes a string, which is expected to be
            delimited by a string from the array in its second argument.
            </summary>
            <param name="pstrList">
            String containing the delimited list.
            </param>
            <param name="pstrDlm">
            Array of strings, at least one of which is expected to delimit the
            list.
            </param>
            <param name="penmStringSplitOptions">
            A member of the StringSplitOptions enumeration, which governs the
            behavior of the String.Split method.
            </param>
            <remarks>
            After all the elements are in the list, the Sort method of the base
            class is called with the default comparer. If you want to use
            another comparer, you can, of course, call the Sort method directly.
            </remarks>
        </member>
        <member name="M:WizardWrx.DelimitedList.#ctor(System.String,System.Char)">
            <summary>
            This overloaded constructor takes a string, which is expected to be
            delimited by the character in its second argument.
            </summary>
            <param name="pstrList">
            String containing the delimited list.
            </param>
            <param name="pchrDlm">
            A single character, which is expected to expected to delimit the 
            list.
            </param>
            <remarks>
            After all the elements are in the list, the Sort method of the base
            class is called with the default comparer. If you want to use
            another comparer, you can, of course, call the Sort method directly.
            </remarks>
        </member>
        <member name="M:WizardWrx.DelimitedList.#ctor(System.String,System.String)">
            <summary>
            This overloaded constructor takes a string, which is expected to be
            delimited by the character in its second argument.
            </summary>
            <param name="pstrList">
            String containing the delimited list.
            </param>
            <param name="pstrDlm">
            A single string, which is expected to expected to delimit the list.
            </param>
            <remarks>
            The StringSplitOptions argument of the String.Split method, used to
            split the delimited list, defaults to StringSplitOptions.None.
            </remarks>
            <remarks>
            After all the elements are in the list, the Sort method of the base
            class is called with the default comparer. If you want to use
            another comparer, you can, of course, call the Sort method directly.
            </remarks>
        </member>
        <member name="M:WizardWrx.DelimitedList.#ctor(System.String,System.String,System.StringSplitOptions)">
            <summary>
            This overloaded constructor takes a string, which is expected to be
            delimited by the character in its second argument.
            </summary>
            <param name="pstrList">
            String containing the delimited list.
            </param>
            <param name="pstrDlm">
            A single string, which is expected to expected to delimit the list.
            </param>
            <param name="penmStringSplitOptions">
            A member of the StringSplitOptions enumeration, which governs the
            behavior of the String.Split method.
            </param>
            <remarks>
            After all the elements are in the list, the Sort method of the base
            class is called with the default comparer. If you want to use
            another comparer, you can, of course, call the Sort method directly.
            </remarks>
        </member>
        <member name="M:WizardWrx.DelimitedList.StringsToList(System.String[])">
            <summary>
            Copy the array of strings into the ArrayList, then sort the list by
            calling the Sort method of the base class. 
            </summary>
            <param name="pastrList">
            Array of strings created by splitting the delimited string that was
            fed into a constructor.
            </param>
            <remarks>
            As noted in the remarks that accompany all six overloaded
            constructors, this class uses the default comparer. To use your own
            comparer, call the Sort method directly. As with all other methods,
            the Sort is handed off to the base class.
            </remarks>
        </member>
        <member name="T:WizardWrx.DelimitedDataReader">
            <summary>
            This class, which inherits from ArrayList, provides an efficient way to
            read small delimited text files, such as you might use to keep static
            lookup tables, without the overhead and complexity of ADO.
            </summary>
            <remarks>
            The calling class must import the System.Collections.Specialized
            namespace, because records are returned as NameValueCollection
            objects, in which the keys are the field names, and the values are
            the corresponding field values, which are stored as strings.
            
            The field nameas, themselves, are stored in an array of strings,
            which is accessible through the FieldNames property.
            
            The name of the input file and the delimiter character used by the
            constructor are saved, for reference, as read only properties. Other
            properties of the base class (ArrayList) give acces to the record
            count, a means for sorting the records (if you provide your own
            record comparer function), and so forth.
            
            Individual records are accessible through the indexer of the
            underlying ArrayList. The easiest way to run through the records is
            with a foreach loop.
            
            A malformed file causes the constructor to fail and throw an
            exception. Check the Message property of the exception for details
            about the corrupted record. Note that only the first invalid record
            is reported, because the constructor stops and aborts on the first
            bad record.
            </remarks>
        </member>
        <member name="M:WizardWrx.DelimitedDataReader.#ctor(System.String)">
            <summary>
            Construct a default DelimitedDataReader for a TAB delimited text
            file, in which blank lines are significant, and are included.
            </summary>
            <param name="pstrInputFQFN">
            String containing the fully qualified file name. A null string, an
            empty string, or a string that refers to a file that cannot be found
            under the caller's security credentials throws an error and fails.
            </param>
        </member>
        <member name="M:WizardWrx.DelimitedDataReader.#ctor(System.String,System.StringSplitOptions)">
            <summary>
            Construct a  DelimitedDataReader for a TAB delimited text file, in
            which the fate of blank lines is determined by the value of argument
            penmStringSplitOptions.
            </summary>
            <param name="pstrInputFQFN">
            String containing the fully qualified file name. A null string, an
            empty string, or a string that refers to a file that cannot be found
            under the caller's security credentials throws an error and fails.
            </param>
            <param name="penmStringSplitOptions">
            A member of the StringSplitOptions enumeration, presumably other
            than StringSplitOptions.None, which is assumed by the first
            overload. The only option supported by version 2 of the Microsoft
            .NET CLR is RemoveEmptyEntries, which causes blank lines to be
            discarded. Regardless of its value, if the last line is empty, it is
            discarded.
            </param>
            <remarks>
            The calling class must import the System.Collections.Specialized
            namespace, because records are returned as NameValueCollection
            objects, in which the keys are the field names, and the values are
            the corresponding field values, which are stored as strings.
            
            The field nameas, themselves, are stored in an array of strings,
            which is accessible through the FieldNames property.
            
            The name of the input file and the delimiter character used by the
            constructor are saved, for reference, as read only properties. Other
            properties of the base class (ArrayList) give acces to the record
            count, a means for sorting the records (if you provide your own
            record comparer function), and so forth.
            
            Individual records are accessible through the indexer of the
            underlying ArrayList. The easiest way to run through the records is
            with a foreach loop.
            
            A malformed file causes the constructor to fail and throw an
            exception. Check the Message property of the exception for details
            about the corrupted record. Note that only the first invalid record
            is reported, because the constructor stops and aborts on the first
            bad record.
            </remarks>
        </member>
        <member name="M:WizardWrx.DelimitedDataReader.#ctor(System.String,System.StringSplitOptions,System.Char)">
            <summary>
            Construct a  DelimitedDataReader for a TAB delimited text file, in
            which the fate of blank lines is determined by the value of argument
            penmStringSplitOptions, and the field delimiter character is defined
            by argument pchrFieldDelimiter.
            </summary>
            <param name="pstrInputFQFN">
            String containing the fully qualified file name. A null string, an
            empty string, or a string that refers to a file that cannot be found
            under the caller's security credentials throws an error and fails.
            </param>
            <param name="penmStringSplitOptions">
            A member of the StringSplitOptions enumeration, presumably other
            than StringSplitOptions.None, which is assumed by the first
            overload. The only option supported by version 2 of the Microsoft
            .NET CLR is RemoveEmptyEntries, which causes blank lines to be
            discarded. Regardless of its value, if the last line is empty, it is
            discarded.
            </param>
            <param name="pchrFieldDelimiter">
            Field delimiter character. By default, this is a TAB (ASCII 0x09).
            </param>
            <remarks>
            The calling class must import the System.Collections.Specialized
            namespace, because records are returned as NameValueCollection
            objects, in which the keys are the field names, and the values are
            the corresponding field values, which are stored as strings.
            
            The field nameas, themselves, are stored in an array of strings,
            which is accessible through the FieldNames property.
            
            The name of the input file and the delimiter character used by the
            constructor are saved, for reference, as read only properties. Other
            properties of the base class (ArrayList) give acces to the record
            count, a means for sorting the records (if you provide your own
            record comparer function), and so forth.
            
            Individual records are accessible through the indexer of the
            underlying ArrayList. The easiest way to run through the records is
            with a foreach loop.
            
            A malformed file causes the constructor to fail and throw an
            exception. Check the Message property of the exception for details
            about the corrupted record. Note that only the first invalid record
            is reported, because the constructor stops and aborts on the first
            bad record.
            </remarks>
        </member>
        <member name="M:WizardWrx.DelimitedDataReader.#ctor(System.String,System.Char)">
            <summary>
            Construct a  DelimitedDataReader for a TAB delimited text file, in
            which blank lines, except for the last line, are preserved, and the
            field delimiter character is defined by argument pchrFieldDelimiter.
            </summary>
            <param name="pstrInputFQFN">
            String containing the fully qualified file name. A null string, an
            empty string, or a string that refers to a file that cannot be found
            under the caller's security credentials throws an error and fails.
            </param>
            <param name="pchrFieldDelimiter">
            Field delimiter character. By default, this is a TAB (ASCII 0x09).
            </param>
            <remarks>
            The calling class must import the System.Collections.Specialized
            namespace, because records are returned as NameValueCollection
            objects, in which the keys are the field names, and the values are
            the corresponding field values, which are stored as strings.
            
            The field nameas, themselves, are stored in an array of strings,
            which is accessible through the FieldNames property.
            
            The name of the input file and the delimiter character used by the
            constructor are saved, for reference, as read only properties. Other
            properties of the base class (ArrayList) give acces to the record
            count, a means for sorting the records (if you provide your own
            record comparer function), and so forth.
            
            Individual records are accessible through the indexer of the
            underlying ArrayList. The easiest way to run through the records is
            with a foreach loop.
            
            A malformed file causes the constructor to fail and throw an
            exception. Check the Message property of the exception for details
            about the corrupted record. Note that only the first invalid record
            is reported, because the constructor stops and aborts on the first
            bad record.
            </remarks>
        </member>
        <member name="M:WizardWrx.DelimitedDataReader.ParseInputFile">
            <summary>
            Function ParseInputFile does the real work of all the constructors.
            </summary>
            <returns>
            TRUE if the object was constructed, otherwise, FALSE.
            </returns>
        </member>
        <member name="M:WizardWrx.DelimitedDataReader.TestFieldDelimiter(System.Char)">
            <summary>
            Verify that argument pchrFieldDelimiter is not null.
            </summary>
            <param name="pchrFieldDelimiter">
            Field delimiter character. By default, this is a TAB (ASCII 0x09).
            </param>
            <returns>
            TRUE, unless character pchrFieldDelimiter is NULL.
            </returns>
        </member>
        <member name="M:WizardWrx.DelimitedDataReader.TestFQFN(System.String)">
            <summary>
            Verify that argument pstrInputFQFN is neither null, nor empty, and
            that it names a file that exists within the security context of the
            called.
            </summary>
            <param name="pstrInputFQFN">
            String containing the fully qualified file name. A null string, an
            empty string, or a string that refers to a file that cannot be found
            under the caller's security credentials throws an error and fails.
            </param>
            <returns>
            TRUE if pstrInputFQFN is the name of a file that exists, else FALSE.
            </returns>
        </member>
        <member name="M:WizardWrx.DelimitedDataReader.TestSplitOptions(System.StringSplitOptions)">
            <summary>
            Verify that argument penmStringSplitOptions is a valid member of the
            StringSplitOptions enumeration.
            </summary>
            <param name="penmStringSplitOptions">
            A member of the StringSplitOptions enumeration, presumably other
            than StringSplitOptions.None, which is assumed by the first
            overload. The only option supported by version 2 of the Microsoft
            .NET CLR is RemoveEmptyEntries, which causes blank lines to be
            discarded. Regardless of its value, if the last line is empty, it is
            discarded.
            </param>
            <returns>
            TRUE if penmStringSplitOptions is a member of the StringSplitOptions
            enumeration, otherwise FALSE.
            </returns>
        </member>
        <member name="P:WizardWrx.DelimitedDataReader.FieldDelimiter">
            <summary>
            Field delimiter character. By default, this is a TAB (ASCII 0x09).
            </summary>
        </member>
        <member name="P:WizardWrx.DelimitedDataReader.FieldNames">
            <summary>
            Returns an array of field names, in their order of appearance in the
            file, according to its header record.
            </summary>
        </member>
        <member name="P:WizardWrx.DelimitedDataReader.InputFQFN">
            <summary>
            String containing the fully qualified name of the input file. This
            property is not set until the constructor has determined that the
            maned file exists.
            </summary>
        </member>
        <member name="P:WizardWrx.DelimitedDataReader.QuoteCharacter">
            <summary>
            Field quoting character. By default, this is a double quotation mark (ASCII 0x22).
            </summary>
        </member>
        <member name="P:WizardWrx.DelimitedDataReader.StringSplitOptions">
            <summary>
            A member of the StringSplitOptions enumeration, presumably other
            than StringSplitOptions.None, which is assumed by the first
            overload. The only option supported by version 2 of the Microsoft
            .NET CLR is RemoveEmptyEntries, which causes blank lines to be
            discarded. Regardless of its value, if the last line is empty, it is
            discarded.
            </summary>
        </member>
        <member name="T:WizardWrx.RegExpSupport">
            <summary>
            Constants, some built from others by static methods, to expedite common
            tasks that use regular expressions.
            </summary>
            <remarks>
            Reference: RegExLib.com Regular Expression Cheat Sheet (.NET), at
            http://regexlib.com/CheatSheet.aspx.
            </remarks>
        </member>
        <member name="F:WizardWrx.RegExpSupport.MATCH_ALTERNATION">
             <summary>
             Like the binary Logical OR operator in a logical expression, this
             character says "match either the character on its left OR the
             character on its right.
            
             Regular expressions may contain many alternations, forming a group
             that behaves commutatively.
             </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.MATCH_ESCAPE">
             <summary>
             Preceding another metacharacter, one of these tells the Engine to
             treat the metacharacter as a literal.
            
             Preceding certain other characters, one of these signals a special,
             non-printing character. For example, preceding a lower case a, it
             signifies an Alarm (Bell). More commonly, however, before a lower
             case t, this character signifies a Tab, before a lower case n means
             a Newline, and a lower case r denotes a Carriage Return.
            
             N. B. A Newline in the .NET RegExp Engine and in the Perl RegExp
             Engine are two different things.
             </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.MATCH_GROUP_BEGIN">
            <summary>
            Define the start of a group. This is the same as a subexpression in
            Perl.
            </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.MATCH_GROUP_END">
            <summary>
            Define the end of a group. This is the same as a subexpression in
            Perl.
            </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.MATCH_MULTIPLE_PREVIOUS_CHAR">
            <summary>
            Match zero or more of of the previous character or expression.
            </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.MATCH_ONE_OR_MORE_PREVIOUS_CHAR">
            <summary>
            Match one or more of of the previous character or expression.
            </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.MATCH_SHORTEST">
            <summary>
            Append to a greedy match to make it match the fewest possible characters.
            </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.MATCH_STRING_START">
            <summary>
            Match start of line, absent the String modifier, which changes its
            meaning to match start of the entire String.
            </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.MATCH_STRING_END">
            <summary>
            Match end of line, absent the String modifier, which changes its
            meaning to match end of the entire String.
            </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.MATCH_WILDCARD_CHAR">
             <summary>
             Match one of any character, except a Newline (absent the String
             modifier, which adds the Newline to the list of matched characters.
            
             Use MATCH_MULTIPLE_PREVIOUS_CHAR to extend the match to a string of
             the same character.
            
             Use MATCH_SHORTEST, following this character, followed by
             MATCH_MULTIPLE_PREVIOUS_CHAR, to limit the match.
             </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.CARRIAGE_RETURN">
            <summary>
            Represents a Cariage Return (CR in Windows text) in a Regular Expression
            </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.MATCH_DTM_YYYYMMDD_FORMATTED">
            <summary>
            Match a date in YYYY/MM/DD format, where the delimiter can be ANY
            character.
            </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.MATCH_DTM_HHMMSS_FORMATTED">
            <summary>
            Match a time in hh:mm:ss format, where the delimiter MUST be a
            colon, and all digits are required.
            </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.MATCH_DTM_HHMMSSTTT_FORMATTED">
            <summary>
            Match a time in hh:mm:ss.ttt format, where the delimiter between
            hours, minutes, and seconds MUST be a colon, and the delimiter
            between seconds and milliseconds MUST be a point. All digits are
            required.
            </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.ESCAPED_QUOTE">
            <summary>
            Escaped quote, used to embed quotation marks in regular expressions.
            </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.NEWLINE">
            <summary>
            Represents a Newline (CR/LF in Windows text) in a Regular Expression
            </summary>
            <remarks>
            See "How to avoid VBScript regular expression gotchas," at
            http://www.xaprb.com/blog/2005/11/04/vbscript-regular-expression-gotchas/,
            especially the responses.
            </remarks>
        </member>
        <member name="F:WizardWrx.RegExpSupport.PAGE_TAG_PREFIX">
            <summary>
            Match the beginning of the Page tag in a ASP.NET page.
            </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.PAGE_TAG_SUFFIX">
            <summary>
            Match the end of the Page tag in a ASP.NET page.
            </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.TITLE_ATTRIBUTE_LABEL">
            <summary>
            Title attribute of the ASP.NET Page tag looks like this.
            </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.REGEXP_WHOLE_MATCH">
            <summary>
            In the .NET version of the regular expression matching engine, the
            first group, whose index is zero, matches the whole expression.
            </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.REGEXP_FIRST_MATCH">
            <summary>
            Not surprisingly, the .NET regular expression returns a collection
            of matches. Like all collections, individual members are numbered
            from zero.
            </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.REGEXP_FIRST_SUBMATCH">
            <summary>
            In the .NET version of the regular expression matching engine, the
            subexpressions are numbered from 1, just as they are in Perl.
            </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.FRIEDL_HTML_TAG_MATCH">
            <summary>
            Jeffrey Friedl's regular expression for matching any arbitrary HTML
            tag. Jeffrey Friedl is the author of Mastering Regular Expressions,
            published by O'Reily, which is regarded as the "Bible" of Regular
            Expressions.
            </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.MODIFIED_FRIEDL_HTML_TAG_MATCH">
            <summary>
            This is a derivation of Jeffrey Friedl's regular expression, adapted
            to capture the tag name in the first submatch.
            </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.FRIEDL_GRAY_WHOLE_HTML_TAG_MATCH">
            <summary>
            Use this to get the whole XML body in one long string. Repeated uses
            should allow you to peform stepwise refinements, until you get to
            the innermost tag.
            </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.SGML_COMPLETE_BODY">
            <summary>
            Match the whole body of any HTML document. Except in special cases,
            you must employ the String and IgnoreCase modifiers to get this
            expression to work.
            </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.SGML_COMPLETE_HEAD">
            <summary>
            Match the entire Head section of any HTML document. Except in
            special cases, you must employ the String and IgnoreCase modifiers
            to get this expression to work.
            </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.SGML_COMPLETE_HTML_DOC">
            <summary>
            Match the entirety of any HTML document. Use this expression to
            discard preceding HTTP headers. Except in special cases, you must
            employ the String and IgnoreCase modifiers to get this expression to
            work.
            </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.SGML_OPENING_TAG_ANY">
             <summary>
             Match any opening HTML or XML tag.
            
             Except in special cases, you should employ the IgnoreCase modifier.
             </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.SGML_CLOSING_TAG_ANY">
             <summary>
             Match any closing HTML or XML tag.
            
             Except in special cases, you should employ the IgnoreCase modifier.
             </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.SGML_COMPLETE_TAG_ARBITRARY">
             <summary>
             Match an arbitrary HTML or XML tag that appears on a single line (or
             multiple lines, if the String modifier is employed).
            
             Except in special cases, you should employ the IgnoreCase modifier.
            
             You must interpolate the tag name into this string by calling the
             the static string.Format method, passing this string as the format
             and the tag as the sole substitution value.
            
             You may also pass a tag name to static method MatchArbitraryHtmlTag,
             which returns a pattern. For example, to find all Anchor tags, pass
             "A" to MatchArbitraryHtmlTag.
             </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.SGML_OPENING_TAG_ARBITRARY">
             <summary>
             Match an arbitrary opening HTML or XML tag.
            
             Except in special cases, you should employ the IgnoreCase modifier.
            
             You must interpolate the tag name into this string by calling the
             the static string.Format method, passing this string as the format
             and the tag as the sole substitution value.
            
             You may also pass a tag name to method MatchArbitraryHtmlOpeningTag,
             which returns a pattern. For example, to find all Anchor tags, pass
             "A" to MatchArbitraryHtmlOpeningTag.
             </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.SGML_CLOSING_TAG_ARBITRARY">
             <summary>
             Match an arbitrary closing HTML or XML tag.
            
             Except in special cases, you should employ the IgnoreCase modifier.
            
             You must interpolate the tag name into this string by calling the
             the static string.Format method, passing this string as the format
             and the tag as the sole substitution value.
            
             You may also pass a tag name to method MatchArbitraryHtmlClosingTag,
             which returns a pattern. For example, to find all Anchor tags, pass
             "A" to MatchArbitraryHtmlClosingTag.
             </summary>
        </member>
        <member name="M:WizardWrx.RegExpSupport.ALL_GREEDY_MATCH">
            <summary>
            Return a string that matches the maximum number of any character.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WizardWrx.RegExpSupport.ALL_MINIMAL_MATCH">
            <summary>
            Return a string that matches the minimum number of any character.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WizardWrx.RegExpSupport.PAGE_TAG_MATCH">
            <summary>
            Return a string that matches the Page tag in a ASP.NET document.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WizardWrx.RegExpSupport.TITLE_ATTRIBUTE_MATCH">
            <summary>
            Expression to match the Title attribute of an ASP.NET page.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WizardWrx.RegExpSupport.MatchArbitraryHtmlTag(System.String)">
            <summary>
            Interpolate a tag name into the SGML_COMPLETE_TAG_ARBITRARY match
            expression template.
            </summary>
            <param name="pstrTagName">
            String containing the name of the tag to match.
            </param>
            <returns>
            A Regular Expression match expression that will match the tag named
            in argument pstrTagName.
            </returns>
        </member>
        <member name="M:WizardWrx.RegExpSupport.MatchArbitraryHtmlOpeningTag(System.String)">
            <summary>
            Interpolate a tag name into the SGML_OPENING_TAG_ARBITRARY match
            expression template.
            </summary>
            <param name="pstrTagName">
            String containing the name of the tag to match.
            </param>
            <returns>
            A Regular Expression match expression that will match the opening
            tag named in argument pstrTagName.
            </returns>
        </member>
        <member name="M:WizardWrx.RegExpSupport.MatchArbitraryHtmlClosingTag(System.String)">
            <summary>
            Interpolate a tag name into the SGML_CLOSING_TAG_ARBITRARY match
            expression template.
            </summary>
            <param name="pstrTagName">
            String containing the name of the tag to match.
            </param>
            <returns>
            A Regular Expression match expression that will match the closing
            tag named in argument pstrTagName.
            </returns>
        </member>
        <member name="T:WizardWrx.WebConfigForLocalApps">
            <summary>
            Provide methods for retrieving data, such as a SQL Server connection
            string, from the AppSettings section of a Web.Config file, for use by
            desktop applications.
            </summary>
        </member>
        <member name="M:WizardWrx.WebConfigForLocalApps.GetInstance(System.String,System.String)">
            <summary>
            Get a reference to the WebConfigForLocalApps singleton, using the
            supplied Registry key and value names to find it.
            </summary>
            <param name="pstrSubkeyName">
            String containing the fully qualified name of a Registry key, which
            is expected to point to a key in the HKEY_LOCAL_MACHINE hive.
            </param>
            <param name="pstrRegValNmConfigFQFN">
            The name of a Named Value of the key specified by pstrSubkeyName,
            which contains the fully qualified name of the web.config file.
            </param>
            <returns>
            The return value is a reference to the fully initialized
            WebConfigForLocalApps object.
            </returns>
        </member>
        <member name="M:WizardWrx.WebConfigForLocalApps.GetInstance(System.String,System.String,System.String)">
            <summary>
            Get a reference to the WebConfigForLocalApps singleton, using the
            supplied Registry key and value names to find it. The third argument
            is the name of a value in the same Registry key that identifies the
            key in the Web configuration file that holds the connection string
            to the associated SQL Server data base.
            </summary>
            <param name="pstrSubkeyName">
            String containing the fully qualified name of a Registry key, which
            is expected to point to a key in the HKEY_LOCAL_MACHINE hive.
            </param>
            <param name="pstrRegValNmConfigFQFN">
            The name of a Named Value of the key specified by pstrSubkeyName,
            which contains the fully qualified name of the web.config file.
            </param>
            <param name="pstrRegValNmConnStrKeyNm">
            The name of a Named Value of the key specified by pstrSubkeyName.
            </param>
            <returns>
            As with the simpler constructor, the private InitInstance method
            validates and processes the first two arguments. The third is
            addressed by calling the GetConnStr method, which is provided for
            setting the SQLServerConnectionString property independently after
            the object is constructed.
            </returns>
        </member>
        <member name="M:WizardWrx.WebConfigForLocalApps.GetConfigValueByName(System.String)">
            <summary>
            Given the name of a key in the appSettings section of a web.config
            file, return a string containing the corresponding value.
            </summary>
            <param name="pstrKeyName">
            String containing the name of the desired settings key. This string
            cannot be null or blank.
            </param>
            <returns>
            A string containing the setting value, if it exists. Otherwise, the
            return value is null.
            </returns>
            <remarks>
            If pstrKeyName is null, the method throws an ArgumentNullException.
            
            If pstrKeyName is am empty string, the method throws an
            ArgumentOutOfRangeException.
            
            Otherwise, it returns SOMETHING, although that something may be an
            empty string.
            </remarks>
        </member>
        <member name="M:WizardWrx.WebConfigForLocalApps.GetConnStr(System.String)">
            <summary>
            Set the connection string property by querying the Windows Registry
            for the name of the key that contains it.
            </summary>
            <param name="pstrRegValNmConnStrKeyNm">
            The name of a Named Value of the key specified by pstrSubkeyName.
            </param>
            <returns>
            The connection string, saving a property lookup.
            </returns>
        </member>
        <member name="M:WizardWrx.WebConfigForLocalApps.IsChanged">
            <summary>
             Determine whether the web.config data stored in the object is out
             of date.
            </summary>
            <returns>
            This method returns TRUE if the web.config file on disk is newer
            than it was when it was first read. Please see Remarks.
            </returns>
            <remarks>
            This test is implemented as a method, so that its value is checked
            only as needed. If it were a property, its value would be updated
            continuously.
            </remarks>
        </member>
        <member name="M:WizardWrx.WebConfigForLocalApps.InitInstance(System.String,System.String)">
            <summary>
            Validate and process the first two arguments of both initializers.
            </summary>
            <param name="pstrSubkeyName">
            See the constructor documentation.
            </param>
            <param name="pstrRegValNmConfigFQFN">
            See the constructor documentation.
            </param>
        </member>
        <member name="P:WizardWrx.WebConfigForLocalApps.ApplicationPhysicalPath">
            <summary>
            Return the name of the application root directory, with a trailing
            backslash. This property is a plug-in replacement for the like named
            property of the  System.Web.Hosting.HostingEnvironment class.
            </summary>
            <returns>
            This string is the fully qualified name of the root directory where
            the Web application associated with this object is stored, including
            a terminal backslash.
            </returns>
        </member>
        <member name="P:WizardWrx.WebConfigForLocalApps.ConfigModifiedDate">
            <summary>
            This read only property returns the last modified date on the config
            file, as of the instant when the initializer started parsing it.
            </summary>
        </member>
        <member name="P:WizardWrx.WebConfigForLocalApps.SQLServerConnectionString">
            <summary>
            Return the SQL Server connection string stored in the AppSettings
            section of the underlying web.config file.
            </summary>
            <remarks>
            Unless the overloaded constructor is called, the connection string
            is not initialized until the GetConnStr method is called.
            </remarks>
        </member>
        <member name="T:WizardWrx.HTMLDocs.Divisions">
            <summary>
            This class derives from Dictionary. Instances return a Dictionary of the
            text in each named division in the input document, indexed by the ID
            attribute of each division.
            
            This class supplies little more than the bare minimum required for it to
            inherit from Dictionary, which is a pair of constructors, one public,
            requiring a file name, and the other private, to force consumers to
            supply a file name.
            
            There is one utility property, DivIdList, which returns an array
            containing the list of division ID strings. You can use this method to
            hide some of the complexity associated with the fact that the Keys
            collection is not a native String type, which is the type of object
            returned by the base class enumerator.
            
            Everything else is inhertied from Dictionary.
            
            There are also static methods, also used by the public constructor, that
            can be used to process divisions without incurring the overhead required
            to keep an instance of the Divisions class alive.
            </summary>
        </member>
        <member name="M:WizardWrx.HTMLDocs.Divisions.#ctor(System.String)">
            <summary>
            Given the name of a file that contains HTML text that is
            sufficiently well formed to permit identifying and extracting its
            named divisions, return a Dictionary containing the text of each
            division, indexed by division ID.
            </summary>
            <param name="pstrFQFN">
            String containing the name of the HTML document from which to
            extract the division.
            </param>
        </member>
        <member name="M:WizardWrx.HTMLDocs.Divisions.EnumNamedDivs(System.String)">
            <summary>
            Given the name of a HTML document, returns a string array
            containing the IDs of all the named divisions in it.
            </summary>
            <param name="pstrFQFN">
            String containing the name of the HTML document from which to
            extract the division.
            </param>
            <returns>
            Array of strings, each of which is the ID of a named division.
            </returns>
            <remarks>
            If  pstrFQFN is either an empty string or a null reference, an empty
            array is returned, without throwing an exception.
            
            If argument pstrFQFN names a file that cannot be found, opened, and
            read, an empty array is returned, without throwing an exception.
            
            If argument pstrFQFN names a file that is empty, an empty array is
            returned, without throwing an exception.
            
            Although the file named by argument pstrFQFN is expected to contain
            HTML text, it need not be a well formed HTML document, nor must its
            extension be associated with the TEXT/HTML mime type, because this
            method uses regular expressions to search for the named divisions.
            So long as the file contains at least one named division, and its
            container tags are well formed, it will be identified and added to
            the list.
            </remarks>
        </member>
        <member name="M:WizardWrx.HTMLDocs.Divisions.ExtractNamedDivs(System.String)">
             <summary>
             Given the name of a HTML document, return an ArrayList containing a
             collection of Division objects.
             </summary>
             <param name="pstrFQFN">
             String containing the name of the HTML document from which to
             extract the division.
             </param>
             <returns>
             ArrayList of Division objects, each of which is a named division.
             </returns>
             <remarks>
             If  pstrFQFN is either an empty string or a null reference, an empty
             array is returned, without throwing an exception.
             
             If argument pstrFQFN names a file that cannot be found, opened, and
             read, an empty array is returned, without throwing an exception.
             
             If argument pstrFQFN names a file that is empty, an empty array is
             returned, without throwing an exception.
             
             Although the file named by argument pstrFQFN is expected to contain
             HTML text, it need not be a well formed HTML document, nor must its
             extension be associated with the TEXT/HTML mime type, because this
             method uses regular expressions to search for the named divisions.
             So long as the file contains at least one named division, and its
             container tags are well formed, it will be identified and added to
             the list.
             
             References: "MatchCollection Class," 
                         http://msdn.microsoft.com/en-us/library/system.text.regularexpressions.matchcollection(VS.80).aspx
             
                         "Match Class,"
                         http://msdn.microsoft.com/en-us/library/system.text.regularexpressions.match(VS.85).aspx
                         Although this page states that it applies to Microsoft
                         .NET Framework, Version 3.0, its content seems just as
                         relevant to 2.0, whose man page is missing.
             
                         "Match Members," at
                         http://msdn.microsoft.com/en-us/library/system.text.regularexpressions.match_members(VS.80).aspx
                         This man page is for .NET Framework, Version 2.0.
             
                         "Match.Groups Property," at
                         http://msdn.microsoft.com/en-us/library/system.text.regularexpressions.match.groups(VS.80).aspx
                         I included this man page only for completeness, because
                         it adds nothing useful, as is very sparse, containing
                         little that isn't already obvious from the Match Members
                         man page.
             
                         "Group Class," at
                         http://msdn.microsoft.com/en-us/library/system.text.regularexpressions.group(VS.80).aspx
                         This man page is also pretty sparse, and poorly written.
             
                         "Group Members," at
                         http://msdn.microsoft.com/en-us/library/system.text.regularexpressions.group_members(VS.80).aspx
             
                         "Group.Captures Property," at
                         http://msdn.microsoft.com/en-us/library/system.text.regularexpressions.group.captures(VS.80).aspx
                         These last two references contribute almost nothing,
                         except to convince me that the authors of this part of
                         the documentation probably didn't understand regular
                         expressions very well. The documentation seems to go in
                         circles, without saying much of any value.
            
                         Experimentation and observation has confirmed for me the
                         following facts.
             
                         1) Groups[0] is the same as $MATCH in Perl.
             
                         2) Groups[1] through Groups[9] are the same as $1
                            through $9 in Perl.
             
                         If there are equivalents of $PREMATCH and $POSTMATCH, I
                         haven't found them yet.
             </remarks>
        </member>
        <member name="M:WizardWrx.HTMLDocs.Divisions.ExtractDivByName(System.String,System.String)">
            <summary>
            Given the ID of a division and the name of a HTML document, return
            the contents of the named division, excluding the enclosing tags.
            </summary>
            <param name="pstrDivID">
            String containing the division ID.
            </param>
            <param name="pstrFQFN">
            String containing the name of the HTML document from which to
            extract the division.
            </param>
            <returns>
            String containing the text between the opening and closing tags of
            the specified division.
            </returns>
            <remarks>
            If either pstrDivID or pstrFQFN is either an empty string or a null
            reference, an empty string is returned, without throwing an exception.
            
            If argument pstrDivID names a division that does not exist in the
            specified document, an empty string is returned, without throwing an
            exception.
            
            If argument pstrFQFN names a file that cannot be found, opened, and
            read, an empty string is returned, without throwing an exception.
            
            If argument pstrFQFN names a file that is empty, an empty string is
            returned, without throwing an exception.
            
            Although the file named by argument pstrFQFN is expected to contain
            HTML text, it need not be a well formed HTML document, nor must its
            extension be associated with the TEXT/HTML mime type, because this
            method uses regular expressions to search for the named division. So
            long as the division exists, and its container tags are well formed,
            its contents will be found and returned.
            </remarks>
        </member>
        <member name="P:WizardWrx.HTMLDocs.Divisions.DivIdList">
            <summary>
            Returns an array of Strings, each of which is the ID of a named
            Division in the document that was passed into the constructor.
            </summary>
            <remarks>
            Though you could just as easily get the ID from the Keys collection
            of the base class, the key is not a native String type, so you need
            more knowledge of the base class than is safe to assume.
            
            I could have also used an ArrayList, as I did for some of the static
            methods, but, since the number of elements is known at allocation
            time, I may as well use the more primitive object type, which can
            still be enumerated.
            </remarks>
        </member>
    </members>
</doc>
